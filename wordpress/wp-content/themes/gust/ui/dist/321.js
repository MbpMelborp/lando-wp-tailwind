(self.webpackChunkgust_builder=self.webpackChunkgust_builder||[]).push([[321],{47634:(e,t,s)=>{"use strict";var a=s(60150),r=s(17030),n=s(50637),i=s.n(n);const o={2:{tailwind:()=>Promise.all([s.e(341),s.e(926),s.e(598),s.e(645)]).then(s.t.bind(s,70598,23)),postcss:()=>s.e(973).then(s.bind(s,39973)),autoprefixer:()=>Promise.all([s.e(806),s.e(136)]).then(s.t.bind(s,19806,23)),featureFlags:()=>s.e(624).then(s.bind(s,22624)),resolveConfig:()=>s.e(926).then(s.t.bind(s,86926,23)),generateRules:()=>s.e(146).then(s.bind(s,47146)),expandApplyAtRules:()=>s.e(448).then(s.bind(s,90448)),contextUtils:()=>Promise.resolve().then(s.bind(s,80824))},3:{tailwind:()=>Promise.all([s.e(341),s.e(818),s.e(745),s.e(94)]).then(s.t.bind(s,20745,23)),postcss:()=>s.e(973).then(s.bind(s,39973)),autoprefixer:()=>Promise.all([s.e(806),s.e(136)]).then(s.t.bind(s,19806,23)),featureFlags:()=>Promise.resolve().then(s.bind(s,91580)),resolveConfig:()=>Promise.all([s.e(818),s.e(707)]).then(s.t.bind(s,44707,23)),generateRules:()=>Promise.resolve().then(s.bind(s,5225)),expandApplyAtRules:()=>s.e(570).then(s.bind(s,77570)),contextUtils:()=>Promise.resolve().then(s.bind(s,20761))}},c=async e=>(await Promise.all(Object.keys(o[e]).map((async t=>{const s=await o[e][t]();return{[t]:s.default||s}})))).reduce(((e,t)=>({...e,...t})),{}),l=s(84686),d=l.default;function u(e){p(e),e.first&&(e.first.raws.before="")}function p(e,t=0){e.each&&e.each(((s,a)=>{s.raws.before&&s.raws.before.trim()&&!s.raws.before.includes("\n")||(s.raws.before=`\n${"rule"!==e.type&&a>0?"\n":""}${"  ".repeat(t)}`),s.raws.after=`\n${"  ".repeat(t)}`,p(s,t+1)}))}let m;self.BUILD_ID=0;const f=(e,t,s,a)=>{var r;const n=((e,t)=>`${e}::::${t}`)(e,t.id),i=null===(r=t.children)||void 0===r?void 0:r.map((t=>f(e,t,s,a))).join(" "),o=[t.classNames||"",i||""];if(s[n]){const e=s[n];o.push(e.classNames||"",e.extraClassNames||""),o.push(g(e.children||[],s,a))}return t.options&&t.options.forEach((e=>{var t,a;if("className"!==e.modify)return;const r="select"===e.type&&e.options[0].value||"",i=null===(a=null===(t=s[n])||void 0===t?void 0:t.options)||void 0===a?void 0:a[e.name];o.push(i||r)})),o.join(" ")},g=(e,t,s)=>e.filter((e=>!!t[e])).map((e=>{const a=t[e],{parent:r,children:n}=a,i=function(e,t){var s={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.indexOf(a)<0&&(s[a]=e[a]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(a=Object.getOwnPropertySymbols(e);r<a.length;r++)t.indexOf(a[r])<0&&Object.prototype.propertyIsEnumerable.call(e,a[r])&&(s[a[r]]=e[a[r]])}return s}(a,["parent","children"]),o=[i.classNames,i.extraClassNames];i.repeaterItems&&o.push(g(i.repeaterItems,t,s));const c=g(n||[],t,s);return o.push(c),i.instanceOfComponent&&i.instanceOfComponent in s&&o.push(f(i.instanceId,s[i.instanceOfComponent],t,s)),o.join(" ")})).flat().join(" ");var _=s(82492),h=s.n(_),v=s(42502),y=s.n(v);const b={darkMode:!1,theme:{extend:{colors:{primary:"#1976D2",secondary:"#424242",accent:"#82B1FF",error:"#FF5252",info:"#2196F3",success:"#4CAF50",warning:"#FFC107",gust:{primary:"#83A5FF",gray:{100:"#F1EDEF",200:"#E7E0E2",300:"#D1D1D6",400:"#C7C7C7",900:"#333"},red:{400:"#FFBDBD"}}},gridTemplateColumns:{"1p5-auto":"1.5rem auto"},minHeight:{20:"5rem",60:"15rem","screen-admin-bar":"calc(100vh - 32px)"},spacing:{"admin-bar":"32px","screen-admin-bar":"calc(100vh - 32px)"},typography:{DEFAULT:{css:{color:"inherit"}}}}},variants:{activeItemVariants:["backgroundColor","backgroundOpacity","borderColor","borderOpacity","boxShadow","display","dropShadow","fontWeight","opacity","rotate","scale","skew","textColor","textOpacity","textDecoration","transform","translate","visibility"].reduce(((e,t)=>({...e,[t]:["gust-active-item","group-gust-active-item"]})),{})},plugins:[s(34270),s(54863),s(64221),s(50130),y()((function({addVariant:e,e:t}){e("gust-active-item",(({modifySelectors:e,separator:s})=>{e((({className:e})=>`.gust-active-item.${t(`gust-active-item${s}${e}`)}`))})),e("group-gust-active-item",(({modifySelectors:e,separator:s})=>{e((({className:e})=>`.group.gust-active-item .${t(`group-gust-active-item${s}${e}`)}`))}))}))]};var w=s(42571),C=s(13410),x=s.n(C),A=s(96813),I=s(26905),L=s.n(I);function S(e){let t="";for(let s=0;s<e.length;s++)("{"===e[s]||"}"===e[s])&&"\\"!==e[s-1]||(t+=e[s]);return t}const E=async({config:e,tailwindVersion:t})=>{try{const a=await c(t),r={jit:!0,separator:e.separator||":",version:"3.1.3",featureFlags:a.featureFlags,enabled:!0,editor:{userLanguages:{},capabilities:{},getConfiguration:()=>({editor:{tabSize:2},tailwindCSS:{validate:!0,classAttributes:["class"],lint:{cssConflict:"warning",invalidApply:"error",invalidScreen:"error",invalidVariant:"error",invalidConfigPath:"error",invalidTailwindDirective:"error",recommendedVariantOrder:"warning"}}})},modules:{postcss:{module:a.postcss},postcssSelectorParser:{module:x()},jit:{generateRules:{module:a.generateRules.generateRules},expandApplyAtRules:{module:a.expandApplyAtRules}}},config:a.resolveConfig(e)};r.screens="object"==typeof r.config.theme.screens?Object.keys(r.config.theme.screens):[],r.jitContext=2===t?s(80824).createContext(r.config):s(20761).createContext(r.config),r.jitContext.getClassList&&(r.classList=r.jitContext.getClassList().filter((e=>"*"!==e)).map((e=>[e,{color:(0,w.getColor)(r,e)}]))),r.variants=function(e){if(e.jit){function t(t){let s=e.modules.postcssSelectorParser.module.className();return s.value=t,L()(s,"raws.value",s.value)}let s={};return Array.from(e.jitContext.variantMap).forEach((([a,r])=>{let n=(Array.isArray(r[0])?r:[r]).map((([e,t])=>t)),i="__variant_placeholder__",o=e.modules.postcss.module.root({nodes:[e.modules.postcss.module.rule({selector:`.${t(i)}`,nodes:[]})]}),c=e.modules.postcssSelectorParser.module((e=>e.first.filter((({type:e})=>"class"===e)).pop().value));function l(e){return o.each((t=>{"rule"===t.type&&(t.selectors=t.selectors.map((t=>e({get className(){return function(e){return c.transformSync(e)}(t)},selector:t}))))})),o}let d=[];for(let s of n){let r,n=o.clone(),c=s({container:n,separator:e.separator,modifySelectors:l,format:e=>{r=e.replace(/:merge\(([^)]+)\)/g,"$1")},wrap:e=>{"atrule"===e.type&&(r=`@${e.name} ${e.params}`)}});r||(r=c),r?d.push(r):(n.walkDecls((e=>{e.remove()})),r=S(n.toString().replace(`.${t(`${a}:${i}`)}`,"&")).replace(/\s*\n\s*/g," ").trim(),r.includes(i)||d.push(r))}s[a]=d.join(", ")||null})),s}let t=e.config,s=["responsive","hover","focus","group-hover","active","focus-within","default","first","last","odd","even","disabled","visited","group-focus","focus-visible","checked","motion-safe","motion-reduce","dark"];return(Array.isArray(t.plugins)?t.plugins:[]).forEach((t=>{!function(e,t,s){try{(e.handler||e)({addUtilities:()=>{},addComponents:()=>{},addBase:()=>{},matchUtilities:()=>{},addVariant:()=>{},e:e=>e,prefix:e=>e,theme:(e,s)=>L()(t.config,`theme.${e}`,s),variants:()=>[],config:(e,s)=>L()(t.config,e,s),corePlugins:e=>Array.isArray(t.config.corePlugins)?t.config.corePlugins.includes(e):L()(t.config,`corePlugins.${e}`,!0),target:e=>{if("string"==typeof t.config.target)return t.config.target;const[s,a]=L()(t.config,"target");return L()(a,e,s)},postcss:t.modules.postcss.module,...s})}catch(e){}}(t,e,{addVariant:e=>{s.push(e)}})})),s.reduce(((e,t)=>({...e,[t]:null})),{})}(r);const n=A.n.create("file:///HTML","html",1,'<div class=" "></div>');return{suggestions:await(0,w.doComplete)(r,n,{line:0,character:13},{triggerCharacter:" ",triggerKind:1})}}catch(e){return console.log(e),{error:e}}};let O,P,j;const R=self;addEventListener("message",(e=>{return t=void 0,n=void 0,p=function*(){var t;const n=function(e,t="2"){return["2","3"].includes(e)?e:t}(e.data.tailwindVersion||"2");switch(e.data.action){case"compile":{if(!e.data.nodes||!e.data.components)return void R.postMessage({_id:e.data._id,error:"Missing nodes or components"});const o=g((null===(t=e.data.nodes.ROOT)||void 0===t?void 0:t.children)||[],e.data.nodes,e.data.components).replace(/'|"/g,""),p=e.data.defaultHTML||`<div class="${o} ${e.data.safelist||""}"></div>`,f=e.data.css,_=h()(b,e.data.config||{},{mode:"jit"});if("compile"===e.data.action&&void 0!==e.data.config||e.data._recompile){const t=e.data._recompile?O:p,o=e.data._recompile?P:f,g=e.data._recompile?j:_,h=o!==P||g!==j;O=t,P=o,j=g;const v=yield(async e=>{if(e.data._current)return void(m=e.data._current);const t=e.data.html,n=e.data.css,o=e.data.config,p=e.data.tailwindVersion;e.data._isFreshBuild&&self.BUILD_ID++;let f=self.BUILD_ID;try{const{css:m,html:g,jit:_}=await async function(e,t,n,o="2",p=!1,m=!1){let f=!1;const g=(0,a.Y)(e),{tailwind:_,postcss:h,autoprefixer:v,resolveConfig:y,...b}=await c(o);self[r.VIRTUAL_HTML_FILENAME]=t;let w=void 0===g.separator?":":g.separator;w=`${w}`;const C="3"===o;let x,A;"2"===o&&"jit"===g.mode||C?(C?g.content=[r.VIRTUAL_HTML_FILENAME]:g.purge={content:[r.VIRTUAL_HTML_FILENAME]},f=!0):(g.separator=`__TWSEP__${w}__TWSEP__`,g.purge=!1),f&&!p&&(x=C?s(20761).createContext(y(g)):s(80824).createContext(y(g))),l.default=(e,...t)=>{if("3"===o||f)return b.expandApplyAtRules(x);let s=(0,a.Y)(e);s.separator=w;let r=d(s,...t);return async e=>(e.walkRules((e=>{const t=e.selector.replace(/__TWSEP__(.*?)__TWSEP__/g,"$1");t!==e.selector&&(e.before(h.comment({text:"__ORIGINAL_SELECTOR__:"+e.selector})),e.selector=t)})),await r(e),e.walkComments((e=>{e.text.startsWith("__ORIGINAL_SELECTOR__:")&&(e.next().selector=e.text.replace(/^__ORIGINAL_SELECTOR__:/,""),e.remove())})),e)};const I=[!C&&function(e){let t=!1;e.walkAtRules("tailwind",(e=>{if("screens"===e.params.trim())return t=!0,!1})),t||e.append("@tailwind screens;")},function(e){let t=["base","components","utilities"];C||t.push("screens"),e.walkAtRules(/(tailwind|layer)/,(e=>{let s=e.params.trim();t.includes(s)&&("screens"===s&&(s="utilities"),e.before(h.comment({text:`__gust_start_${s}__`})),e.after(h.comment({text:`__gust_end_${s}__`})))}))},_(g),u,v(),function(e){e.each((e=>{let t=e.raws?.tailwind?.parentLayer;t&&(e.before(h.comment({text:`__gust_start_${t}__`})),e.after(h.comment({text:`__gust_end_${t}__`})))}))}].filter(Boolean);m&&I.push(i()()),A=f?(await h(I).process(n,{from:r.VIRTUAL_SOURCE_PATH})).css:(await h(I).process(n,{from:void 0})).css;const L=w.replace(/./g,(e=>/[a-z0-9-_]/i.test(e)?e:`\\${e}`));return{css:A.replace(/__TWSEP__.*?__TWSEP__/g,L),jit:f,...f?{html:t}:{}}}(o,t,n,p,e.data.skipIntelliSense,e.data.minify);return{css:m,html:g,jit:_,buildId:f}}catch(e){if(e.toString().startsWith("CssSyntaxError")){const t=e.message.match(/^.*?:([0-9]+):([0-9]+): (.*?)$/);return null===t?{error:{message:e.message}}:{error:{message:t[3],file:"CSS",line:t[1]}}}return{error:{message:e.message}}}})({data:Object.assign(Object.assign({},e.data),{_isFreshBuild:h,html:t,css:o,config:g,minify:!!e.data.minify,tailwindVersion:n})});!v||v.error||v.canceled?R.postMessage(Object.assign(Object.assign({},v),{_id:e.data._id})):("buildId"in v&&(self.BUILD_ID=v.buildId),R.postMessage({_id:e.data._id,css:v.css,html:v.html,jit:v.jit}))}break}case"listSuggestions":{const t=h()(b,e.data.config||{},{mode:"jit",plugins:[]}),s=yield E({config:t,tailwindVersion:n});s&&!s.error?R.postMessage({_id:e.data._id,suggestions:s.suggestions}):R.postMessage(Object.assign(Object.assign({},s),{_id:e.data._id}));break}default:R.postMessage({error:"No matching action",_id:e.data._id})}},new((o=void 0)||(o=Promise))((function(e,s){function a(e){try{i(p.next(e))}catch(e){s(e)}}function r(e){try{i(p.throw(e))}catch(e){s(e)}}function i(t){var s;t.done?e(t.value):(s=t.value,s instanceof o?s:new o((function(e){e(s)}))).then(a,r)}i((p=p.apply(t,n||[])).next())}));var t,n,o,p}))},42865:e=>{e.exports={options:{enabled:!1}}},73254:(e,t,s)=>{const{VIRTUAL_SOURCE_PATH:a}=s(17030);let r=0;e.exports={statSync:e=>e===a?{mtimeMs:self.BUILD_ID}:{mtimeMs:++r},readFileSync:e=>self[e]||""}},17030:(e,t,s)=>{let a={"@tailwindcss/custom-forms":s(3571),"@tailwindcss/forms":s(38462),"@tailwindcss/typography":s(80166),"@tailwindcss/ui":s(7228),"@tailwindcss/aspect-ratio":s(136),"@tailwindcss/line-clamp":s(32899)};e.exports={PLUGIN_BUILDER_VERSION:"4",VIRTUAL_SOURCE_PATH:"/sourcePath",VIRTUAL_HTML_FILENAME:"/htmlInput",PLUGINS:{2:a,3:{...a,"@tailwindcss/forms":s(52929),"@tailwindcss/typography":s(55396)}}}},46601:()=>{},89214:()=>{},71922:()=>{},2363:()=>{},22868:()=>{},52361:()=>{},94616:()=>{},5827:()=>{},6334:()=>{},40087:()=>{},6666:()=>{}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFFMUosSUFBVyxNQUFPUSxHQUFLZ04sRUFBT2hOLElBQ3ZGLFNBQVNrTixFQUFLcEssR0FKbEIsSUFBZXRELEVBSWFzRCxFQUFPc0ssS0FBT0wsRUFBUWpLLEVBQU90RCxRQUoxQ0EsRUFJeURzRCxFQUFPdEQsTUFKaERBLGFBQWlCc04sRUFBSXROLEVBQVEsSUFBSXNOLEdBQUUsU0FBVUMsR0FBV0EsRUFBUXZOLE9BSVQ2TixLQUFLSixFQUFXRSxHQUNsR0QsR0FBTWhFLEVBQVlBLEVBQVVvRSxNQUFNdEUsRUFBU0MsR0FBYyxLQUFLd0MsV0FOMUIsSUFBVXpDLEVBQVNDLEVBQVk2RCxFQUFHNUQsTSxVRUE5RTFNLEVBQU8rUSxRQUFVLENBQ2ZyTyxRQUFTLENBQUVrRSxTQUFTLEssZ0JDRHRCLE1BQU0sb0JBQUUrSSxHQUF3QixFQUFRLE9BRXhDLElBQUkxTyxFQUFJLEVBRVJqQixFQUFPK1EsUUFBVSxDQUNmQyxTQUFXOU8sR0FDTEEsSUFBT3lOLEVBQ0YsQ0FBRXNCLFFBQVMxUCxLQUFLQyxVQUVsQixDQUFFeVAsVUFBV2hRLEdBRXRCaVEsYUFBZWhQLEdBQU9YLEtBQUtXLElBQU8sSyxnQkNYcEMsSUFBSTZELEVBQVUsQ0FDWiw0QkFBNkIsRUFBUSxNQUNyQyxxQkFBc0IsRUFBUSxPQUM5QiwwQkFBMkIsRUFBUSxPQUNuQyxrQkFBbUIsRUFBUSxNQUMzQiw0QkFBNkIsRUFBUSxLQUNyQywwQkFBMkIsRUFBUSxRQUdyQy9GLEVBQU8rUSxRQUFVLENBQ2ZJLHVCQUF3QixJQUN4QnhCLG9CQUFxQixjQUNyQnRCLHNCQUF1QixhQUN2QitDLFFBQVMsQ0FDUCxFQUFHckwsRUFDSCxFQUFHLElBQ0VBLEVBQ0gscUJBQXNCLEVBQVEsT0FDOUIsMEJBQTJCLEVBQVEsVyIsInNvdXJjZXMiOlsid2VicGFjazovL2d1c3QtYnVpbGRlci8uL3NyYy93b3JrZXJzL2ltcG9ydERlcGVuZGVuY2llcy5qcyIsIndlYnBhY2s6Ly9ndXN0LWJ1aWxkZXIvLi9zcmMvd29ya2Vycy9wcm9jZXNzQ3NzLmpzIiwid2VicGFjazovL2d1c3QtYnVpbGRlci8uL3NyYy93b3JrZXJzL2NvbXBpbGUuanMiLCJ3ZWJwYWNrOi8vZ3VzdC1idWlsZGVyLy4vc3JjL3V0aWwvbm9kZXMudHMiLCJ3ZWJwYWNrOi8vZ3VzdC1idWlsZGVyLy4vc3JjL3dvcmtlcnMvY29uZmlnLmpzIiwid2VicGFjazovL2d1c3QtYnVpbGRlci8uL3NyYy91dGlsL2dldFZhcmlhbnRzLmpzIiwid2VicGFjazovL2d1c3QtYnVpbGRlci8uL3NyYy93b3JrZXJzL2xpc3RTdWdnZXN0aW9ucy5qcyIsIndlYnBhY2s6Ly9ndXN0LWJ1aWxkZXIvLi9zcmMvdXRpbC9ydW5QbHVnaW4uanMiLCJ3ZWJwYWNrOi8vZ3VzdC1idWlsZGVyLy4vc3JjL3dvcmtlcnMvcG9zdGNzcy53b3JrZXIudHMiLCJ3ZWJwYWNrOi8vZ3VzdC1idWlsZGVyLy4vc3JjL3V0aWwvdG9WYWxpZFRhaWx3aW5kVmVyc2lvbi5qcyIsIndlYnBhY2s6Ly9ndXN0LWJ1aWxkZXIvLi9zcmMvbW9kdWxlcy9jb2xvcmV0dGUuanMiLCJ3ZWJwYWNrOi8vZ3VzdC1idWlsZGVyLy4vc3JjL21vZHVsZXMvZnMuanMiLCJ3ZWJwYWNrOi8vZ3VzdC1idWlsZGVyLy4vc3JjL3dvcmtlcnMvY29uc3RhbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGRlcHMgPSB7XG4gIDI6IHtcbiAgICB0YWlsd2luZDogKCkgPT4gaW1wb3J0KCd0YWlsd2luZGNzcycpLFxuICAgIHBvc3Rjc3M6ICgpID0+IGltcG9ydCgncG9zdGNzcycpLFxuICAgIGF1dG9wcmVmaXhlcjogKCkgPT4gaW1wb3J0KCdhdXRvcHJlZml4ZXInKSxcbiAgICBmZWF0dXJlRmxhZ3M6ICgpID0+IGltcG9ydCgndGFpbHdpbmRjc3MvbGliL2ZlYXR1cmVGbGFncycpLFxuICAgIHJlc29sdmVDb25maWc6ICgpID0+IGltcG9ydCgndGFpbHdpbmRjc3MvcmVzb2x2ZUNvbmZpZycpLFxuICAgIGdlbmVyYXRlUnVsZXM6ICgpID0+IGltcG9ydCgndGFpbHdpbmRjc3MvbGliL2ppdC9saWIvZ2VuZXJhdGVSdWxlcycpLFxuICAgIGV4cGFuZEFwcGx5QXRSdWxlczogKCkgPT5cbiAgICAgIGltcG9ydCgndGFpbHdpbmRjc3MvbGliL2ppdC9saWIvZXhwYW5kQXBwbHlBdFJ1bGVzJyksXG4gICAgY29udGV4dFV0aWxzOiAoKSA9PiBpbXBvcnQoJ3RhaWx3aW5kY3NzL2xpYi9qaXQvbGliL3NldHVwQ29udGV4dFV0aWxzJyksXG4gIH0sXG4gIDM6IHtcbiAgICB0YWlsd2luZDogKCkgPT4gaW1wb3J0KCd0YWlsd2luZGNzcy12MycpLFxuICAgIHBvc3Rjc3M6ICgpID0+IGltcG9ydCgncG9zdGNzcycpLFxuICAgIGF1dG9wcmVmaXhlcjogKCkgPT4gaW1wb3J0KCdhdXRvcHJlZml4ZXInKSxcbiAgICBmZWF0dXJlRmxhZ3M6ICgpID0+IGltcG9ydCgndGFpbHdpbmRjc3MtdjMvbGliL2ZlYXR1cmVGbGFncycpLFxuICAgIHJlc29sdmVDb25maWc6ICgpID0+IGltcG9ydCgndGFpbHdpbmRjc3MtdjMvcmVzb2x2ZUNvbmZpZycpLFxuICAgIGdlbmVyYXRlUnVsZXM6ICgpID0+IGltcG9ydCgndGFpbHdpbmRjc3MtdjMvbGliL2xpYi9nZW5lcmF0ZVJ1bGVzJyksXG4gICAgZXhwYW5kQXBwbHlBdFJ1bGVzOiAoKSA9PlxuICAgICAgaW1wb3J0KCd0YWlsd2luZGNzcy12My9saWIvbGliL2V4cGFuZEFwcGx5QXRSdWxlcycpLFxuICAgIGNvbnRleHRVdGlsczogKCkgPT4gaW1wb3J0KCd0YWlsd2luZGNzcy12My9saWIvbGliL3NldHVwQ29udGV4dFV0aWxzJyksXG4gIH0sXG59XG5cbmV4cG9ydCBjb25zdCBpbXBvcnREZXBlbmRlbmNpZXMgPSBhc3luYyAodmVyc2lvbikgPT4ge1xuICBjb25zdCBhbGxEZXBzID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgT2JqZWN0LmtleXMoZGVwc1t2ZXJzaW9uXSkubWFwKGFzeW5jIChrZXkpID0+IHtcbiAgICAgIGNvbnN0IG1vZHVsZSA9IGF3YWl0IGRlcHNbdmVyc2lvbl1ba2V5XSgpXG4gICAgICByZXR1cm4ge1xuICAgICAgICBba2V5XTogbW9kdWxlLmRlZmF1bHQgfHwgbW9kdWxlLFxuICAgICAgfVxuICAgIH0pLFxuICApXG5cbiAgcmV0dXJuIGFsbERlcHMucmVkdWNlKChhY2N1bXVsYXRvciwgY3VycmVudCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5hY2N1bXVsYXRvcixcbiAgICAgIC4uLmN1cnJlbnQsXG4gICAgfVxuICB9LCB7fSlcbn1cbiIsImltcG9ydCB7IGtsb25hIH0gZnJvbSAna2xvbmEvZnVsbCdcbmltcG9ydCB7XG4gIFZJUlRVQUxfU09VUkNFX1BBVEgsXG4gIFZJUlRVQUxfSFRNTF9GSUxFTkFNRSxcbn0gZnJvbSAnfnNyYy93b3JrZXJzL2NvbnN0YW50cydcbmltcG9ydCBjc3NNaW5pZnkgZnJvbSAncG9zdGNzcy1taW5pZnknXG5pbXBvcnQgeyBpbXBvcnREZXBlbmRlbmNpZXMgfSBmcm9tICd+c3JjL3dvcmtlcnMvaW1wb3J0RGVwZW5kZW5jaWVzJ1xuXG5jb25zdCBhcHBseU1vZHVsZTIgPSByZXF1aXJlKCd0YWlsd2luZGNzcy9saWIvbGliL3N1YnN0aXR1dGVDbGFzc0FwcGx5QXRSdWxlcycpXG5cbmNvbnN0IGFwcGx5MiA9IGFwcGx5TW9kdWxlMi5kZWZhdWx0XG5cbmZ1bmN0aW9uIGZvcm1hdE5vZGVzKHJvb3QpIHtcbiAgaW5kZW50UmVjdXJzaXZlKHJvb3QpXG4gIGlmIChyb290LmZpcnN0KSB7XG4gICAgcm9vdC5maXJzdC5yYXdzLmJlZm9yZSA9ICcnXG4gIH1cbn1cblxuZnVuY3Rpb24gaW5kZW50UmVjdXJzaXZlKG5vZGUsIGluZGVudCA9IDApIHtcbiAgbm9kZS5lYWNoICYmXG4gICAgbm9kZS5lYWNoKChjaGlsZCwgaSkgPT4ge1xuICAgICAgaWYgKFxuICAgICAgICAhY2hpbGQucmF3cy5iZWZvcmUgfHxcbiAgICAgICAgIWNoaWxkLnJhd3MuYmVmb3JlLnRyaW0oKSB8fFxuICAgICAgICBjaGlsZC5yYXdzLmJlZm9yZS5pbmNsdWRlcygnXFxuJylcbiAgICAgICkge1xuICAgICAgICBjaGlsZC5yYXdzLmJlZm9yZSA9IGBcXG4ke1xuICAgICAgICAgIG5vZGUudHlwZSAhPT0gJ3J1bGUnICYmIGkgPiAwID8gJ1xcbicgOiAnJ1xuICAgICAgICB9JHsnICAnLnJlcGVhdChpbmRlbnQpfWBcbiAgICAgIH1cbiAgICAgIGNoaWxkLnJhd3MuYWZ0ZXIgPSBgXFxuJHsnICAnLnJlcGVhdChpbmRlbnQpfWBcbiAgICAgIGluZGVudFJlY3Vyc2l2ZShjaGlsZCwgaW5kZW50ICsgMSlcbiAgICB9KVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc0NzcyhcbiAgY29uZmlnSW5wdXQsXG4gIGh0bWxJbnB1dCxcbiAgY3NzSW5wdXQsXG4gIHRhaWx3aW5kVmVyc2lvbiA9ICcyJyxcbiAgc2tpcEludGVsbGlTZW5zZSA9IGZhbHNlLFxuICBtaW5pZnkgPSBmYWxzZSxcbikge1xuICBsZXQgaml0ID0gZmFsc2VcbiAgY29uc3QgY29uZmlnID0ga2xvbmEoY29uZmlnSW5wdXQpXG4gIGNvbnN0IHtcbiAgICB0YWlsd2luZCxcbiAgICBwb3N0Y3NzLFxuICAgIGF1dG9wcmVmaXhlcixcbiAgICByZXNvbHZlQ29uZmlnLFxuICAgIC4uLmRlcHNcbiAgfSA9IGF3YWl0IGltcG9ydERlcGVuZGVuY2llcyh0YWlsd2luZFZlcnNpb24pXG5cbiAgc2VsZltWSVJUVUFMX0hUTUxfRklMRU5BTUVdID0gaHRtbElucHV0XG5cbiAgbGV0IHNlcGFyYXRvciA9XG4gICAgdHlwZW9mIGNvbmZpZy5zZXBhcmF0b3IgPT09ICd1bmRlZmluZWQnID8gJzonIDogY29uZmlnLnNlcGFyYXRvclxuICBzZXBhcmF0b3IgPSBgJHtzZXBhcmF0b3J9YFxuXG4gIGNvbnN0IGlzVjMgPSB0YWlsd2luZFZlcnNpb24gPT09ICczJ1xuXG4gIGlmICgodGFpbHdpbmRWZXJzaW9uID09PSAnMicgJiYgY29uZmlnLm1vZGUgPT09ICdqaXQnKSB8fCBpc1YzKSB7XG4gICAgaWYgKGlzVjMpIHtcbiAgICAgIGNvbmZpZy5jb250ZW50ID0gW1ZJUlRVQUxfSFRNTF9GSUxFTkFNRV1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uZmlnLnB1cmdlID0ge1xuICAgICAgICBjb250ZW50OiBbVklSVFVBTF9IVE1MX0ZJTEVOQU1FXSxcbiAgICAgIH1cbiAgICB9XG4gICAgaml0ID0gdHJ1ZVxuICB9IGVsc2Uge1xuICAgIGNvbmZpZy5zZXBhcmF0b3IgPSBgX19UV1NFUF9fJHtzZXBhcmF0b3J9X19UV1NFUF9fYFxuICAgIGNvbmZpZy5wdXJnZSA9IGZhbHNlXG4gIH1cblxuICBsZXQgaml0Q29udGV4dFxuICBpZiAoaml0ICYmICFza2lwSW50ZWxsaVNlbnNlKSB7XG4gICAgaWYgKGlzVjMpIHtcbiAgICAgIGppdENvbnRleHQgPSByZXF1aXJlKCd0YWlsd2luZGNzcy12My9saWIvbGliL3NldHVwQ29udGV4dFV0aWxzJykuY3JlYXRlQ29udGV4dChcbiAgICAgICAgcmVzb2x2ZUNvbmZpZyhjb25maWcpLFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICBqaXRDb250ZXh0ID0gcmVxdWlyZSgndGFpbHdpbmRjc3MvbGliL2ppdC9saWIvc2V0dXBDb250ZXh0VXRpbHMnKS5jcmVhdGVDb250ZXh0KFxuICAgICAgICByZXNvbHZlQ29uZmlnKGNvbmZpZyksXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgY29uc3QgYXBwbHlDb21wbGV4Q2xhc3NlcyA9IGFwcGx5TW9kdWxlMlxuXG4gIGFwcGx5Q29tcGxleENsYXNzZXMuZGVmYXVsdCA9IChjb25maWcsIC4uLmFyZ3MpID0+IHtcbiAgICBpZiAodGFpbHdpbmRWZXJzaW9uID09PSAnMycgfHwgaml0KSB7XG4gICAgICByZXR1cm4gZGVwcy5leHBhbmRBcHBseUF0UnVsZXMoaml0Q29udGV4dClcbiAgICB9XG5cbiAgICBsZXQgY29uZmlnQ2xvbmUgPSBrbG9uYShjb25maWcpXG4gICAgY29uZmlnQ2xvbmUuc2VwYXJhdG9yID0gc2VwYXJhdG9yXG5cbiAgICBsZXQgZm4gPSBhcHBseTIoY29uZmlnQ2xvbmUsIC4uLmFyZ3MpXG5cbiAgICByZXR1cm4gYXN5bmMgKGNzcykgPT4ge1xuICAgICAgY3NzLndhbGtSdWxlcygocnVsZSkgPT4ge1xuICAgICAgICBjb25zdCBuZXdTZWxlY3RvciA9IHJ1bGUuc2VsZWN0b3IucmVwbGFjZShcbiAgICAgICAgICAvX19UV1NFUF9fKC4qPylfX1RXU0VQX18vZyxcbiAgICAgICAgICAnJDEnLFxuICAgICAgICApXG4gICAgICAgIGlmIChuZXdTZWxlY3RvciAhPT0gcnVsZS5zZWxlY3Rvcikge1xuICAgICAgICAgIHJ1bGUuYmVmb3JlKFxuICAgICAgICAgICAgcG9zdGNzcy5jb21tZW50KHtcbiAgICAgICAgICAgICAgdGV4dDogJ19fT1JJR0lOQUxfU0VMRUNUT1JfXzonICsgcnVsZS5zZWxlY3RvcixcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIClcbiAgICAgICAgICBydWxlLnNlbGVjdG9yID0gbmV3U2VsZWN0b3JcbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgYXdhaXQgZm4oY3NzKVxuXG4gICAgICBjc3Mud2Fsa0NvbW1lbnRzKChjb21tZW50KSA9PiB7XG4gICAgICAgIGlmIChjb21tZW50LnRleHQuc3RhcnRzV2l0aCgnX19PUklHSU5BTF9TRUxFQ1RPUl9fOicpKSB7XG4gICAgICAgICAgY29tbWVudC5uZXh0KCkuc2VsZWN0b3IgPSBjb21tZW50LnRleHQucmVwbGFjZShcbiAgICAgICAgICAgIC9eX19PUklHSU5BTF9TRUxFQ1RPUl9fOi8sXG4gICAgICAgICAgICAnJyxcbiAgICAgICAgICApXG4gICAgICAgICAgY29tbWVudC5yZW1vdmUoKVxuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgICByZXR1cm4gY3NzXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkTGF5ZXJCb3VuZGFyeUNvbW1lbnRzKHJvb3QpIHtcbiAgICBsZXQgc3VwcG9ydGVkTGF5ZXJzID0gWydiYXNlJywgJ2NvbXBvbmVudHMnLCAndXRpbGl0aWVzJ11cbiAgICBpZiAoIWlzVjMpIHtcbiAgICAgIHN1cHBvcnRlZExheWVycy5wdXNoKCdzY3JlZW5zJylcbiAgICB9XG4gICAgcm9vdC53YWxrQXRSdWxlcygvKHRhaWx3aW5kfGxheWVyKS8sIChhdFJ1bGUpID0+IHtcbiAgICAgIGxldCBsYXllciA9IGF0UnVsZS5wYXJhbXMudHJpbSgpXG4gICAgICBpZiAoc3VwcG9ydGVkTGF5ZXJzLmluY2x1ZGVzKGxheWVyKSkge1xuICAgICAgICBpZiAobGF5ZXIgPT09ICdzY3JlZW5zJykge1xuICAgICAgICAgIGxheWVyID0gJ3V0aWxpdGllcydcbiAgICAgICAgfVxuICAgICAgICBhdFJ1bGUuYmVmb3JlKHBvc3Rjc3MuY29tbWVudCh7IHRleHQ6IGBfX2d1c3Rfc3RhcnRfJHtsYXllcn1fX2AgfSkpXG4gICAgICAgIGF0UnVsZS5hZnRlcihwb3N0Y3NzLmNvbW1lbnQoeyB0ZXh0OiBgX19ndXN0X2VuZF8ke2xheWVyfV9fYCB9KSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkVGFpbHdpbmRTY3JlZW5zRGlyZWN0aXZlKHJvb3QpIHtcbiAgICBsZXQgaGFzRGlyZWN0aXZlID0gZmFsc2VcbiAgICByb290LndhbGtBdFJ1bGVzKCd0YWlsd2luZCcsIChub2RlKSA9PiB7XG4gICAgICBpZiAobm9kZS5wYXJhbXMudHJpbSgpID09PSAnc2NyZWVucycpIHtcbiAgICAgICAgaGFzRGlyZWN0aXZlID0gdHJ1ZVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9KVxuICAgIGlmICghaGFzRGlyZWN0aXZlKSB7XG4gICAgICByb290LmFwcGVuZCgnQHRhaWx3aW5kIHNjcmVlbnM7JylcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZGROb2RlTGF5ZXJDb21tZW50cyhyb290KSB7XG4gICAgcm9vdC5lYWNoKChub2RlKSA9PiB7XG4gICAgICBsZXQgbGF5ZXIgPSBub2RlLnJhd3M/LnRhaWx3aW5kPy5wYXJlbnRMYXllclxuICAgICAgaWYgKGxheWVyKSB7XG4gICAgICAgIG5vZGUuYmVmb3JlKHBvc3Rjc3MuY29tbWVudCh7IHRleHQ6IGBfX2d1c3Rfc3RhcnRfJHtsYXllcn1fX2AgfSkpXG4gICAgICAgIG5vZGUuYWZ0ZXIocG9zdGNzcy5jb21tZW50KHsgdGV4dDogYF9fZ3VzdF9lbmRfJHtsYXllcn1fX2AgfSkpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGxldCBjc3NcblxuICBjb25zdCBwbHVnaW5zID0gW1xuICAgICFpc1YzICYmIGFkZFRhaWx3aW5kU2NyZWVuc0RpcmVjdGl2ZSxcbiAgICBhZGRMYXllckJvdW5kYXJ5Q29tbWVudHMsXG4gICAgdGFpbHdpbmQoY29uZmlnKSxcbiAgICBmb3JtYXROb2RlcyxcbiAgICBhdXRvcHJlZml4ZXIoKSxcbiAgICBhZGROb2RlTGF5ZXJDb21tZW50cyxcbiAgXS5maWx0ZXIoQm9vbGVhbilcblxuICBpZiAobWluaWZ5KSB7XG4gICAgcGx1Z2lucy5wdXNoKGNzc01pbmlmeSgpKVxuICB9XG5cbiAgaWYgKCFqaXQpIHtcbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgcG9zdGNzcyhwbHVnaW5zKS5wcm9jZXNzKGNzc0lucHV0LCB7XG4gICAgICBmcm9tOiB1bmRlZmluZWQsXG4gICAgfSlcbiAgICBjc3MgPSByZXN1bHQuY3NzXG4gIH0gZWxzZSB7XG4gICAgY3NzID0gKFxuICAgICAgYXdhaXQgcG9zdGNzcyhwbHVnaW5zKS5wcm9jZXNzKGNzc0lucHV0LCB7XG4gICAgICAgIGZyb206IFZJUlRVQUxfU09VUkNFX1BBVEgsXG4gICAgICB9KVxuICAgICkuY3NzXG4gIH1cblxuICBjb25zdCBlc2NhcGVkU2VwYXJhdG9yID0gc2VwYXJhdG9yLnJlcGxhY2UoLy4vZywgKG0pID0+XG4gICAgL1thLXowLTktX10vaS50ZXN0KG0pID8gbSA6IGBcXFxcJHttfWAsXG4gIClcblxuICByZXR1cm4ge1xuICAgIGNzczogY3NzLnJlcGxhY2UoL19fVFdTRVBfXy4qP19fVFdTRVBfXy9nLCBlc2NhcGVkU2VwYXJhdG9yKSxcbiAgICBqaXQsXG4gICAgLi4uKGppdCA/IHsgaHRtbDogaHRtbElucHV0IH0gOiB7fSksXG4gIH1cbn1cbiIsImltcG9ydCB7IHByb2Nlc3NDc3MgfSBmcm9tICd+c3JjL3dvcmtlcnMvcHJvY2Vzc0Nzcydcblxuc2VsZi5CVUlMRF9JRCA9IDBcblxubGV0IGN1cnJlbnRcblxuY29uc3QgY29tcGlsZSA9IGFzeW5jIChldmVudCkgPT4ge1xuICBpZiAoZXZlbnQuZGF0YS5fY3VycmVudCkge1xuICAgIGN1cnJlbnQgPSBldmVudC5kYXRhLl9jdXJyZW50XG4gICAgcmV0dXJuXG4gIH1cblxuICBjb25zdCBodG1sID0gZXZlbnQuZGF0YS5odG1sXG4gIGNvbnN0IGNzcyA9IGV2ZW50LmRhdGEuY3NzXG4gIGNvbnN0IGNvbmZpZyA9IGV2ZW50LmRhdGEuY29uZmlnXG4gIGNvbnN0IHRhaWx3aW5kVmVyc2lvbiA9IGV2ZW50LmRhdGEudGFpbHdpbmRWZXJzaW9uXG5cbiAgaWYgKGV2ZW50LmRhdGEuX2lzRnJlc2hCdWlsZCkge1xuICAgIHNlbGYuQlVJTERfSUQrK1xuICB9XG5cbiAgbGV0IGJ1aWxkSWQgPSBzZWxmLkJVSUxEX0lEXG5cbiAgdHJ5IHtcbiAgICBjb25zdCB7IGNzczogY29tcGlsZWRDc3MsIGh0bWw6IGNvbXBpbGVkSHRtbCwgaml0IH0gPSBhd2FpdCBwcm9jZXNzQ3NzKFxuICAgICAgY29uZmlnLFxuICAgICAgaHRtbCxcbiAgICAgIGNzcyxcbiAgICAgIHRhaWx3aW5kVmVyc2lvbixcbiAgICAgIGV2ZW50LmRhdGEuc2tpcEludGVsbGlTZW5zZSxcbiAgICAgIGV2ZW50LmRhdGEubWluaWZ5LFxuICAgIClcbiAgICByZXR1cm4geyBjc3M6IGNvbXBpbGVkQ3NzLCBodG1sOiBjb21waWxlZEh0bWwsIGppdCwgYnVpbGRJZCB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGVycm9yLnRvU3RyaW5nKCkuc3RhcnRzV2l0aCgnQ3NzU3ludGF4RXJyb3InKSkge1xuICAgICAgY29uc3QgbWF0Y2ggPSBlcnJvci5tZXNzYWdlLm1hdGNoKC9eLio/OihbMC05XSspOihbMC05XSspOiAoLio/KSQvKVxuICAgICAgaWYgKG1hdGNoID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB7IGVycm9yOiB7IG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UgfSB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4geyBlcnJvcjogeyBtZXNzYWdlOiBtYXRjaFszXSwgZmlsZTogJ0NTUycsIGxpbmU6IG1hdGNoWzFdIH0gfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4geyBlcnJvcjogeyBtZXNzYWdlOiBlcnJvci5tZXNzYWdlIH0gfVxuICAgIH1cbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgY29tcGlsZVxuIiwidmFyIF9fcmVzdCA9ICh0aGlzICYmIHRoaXMuX19yZXN0KSB8fCBmdW5jdGlvbiAocywgZSkge1xuICAgIHZhciB0ID0ge307XG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICAgIHRbcF0gPSBzW3BdO1xuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xuaW1wb3J0IHsgbmFub2lkIH0gZnJvbSAnbmFub2lkJztcbmV4cG9ydCBjb25zdCBnZXRSZWFsSW5zdGFuY2VJZCA9IChpZCkgPT4ge1xuICAgIGNvbnN0IG5vZGVQYXJ0cyA9IGlkLnNwbGl0KCc6Ojo6Jyk7XG4gICAgcmV0dXJuIG5vZGVQYXJ0c1swXTtcbn07XG5leHBvcnQgY29uc3QgZ2V0Q29tcG9uZW50SWRGcm9tSW5zdGFuY2UgPSAoaWQpID0+IHtcbiAgICBjb25zdCBub2RlUGFydHMgPSBpZC5zcGxpdCgnOjo6OicpO1xuICAgIHJldHVybiBub2RlUGFydHNbMV0gfHwgbnVsbDtcbn07XG5leHBvcnQgY29uc3QgZ2V0Q29tcG9uZW50SW5zdGFuY2VJZCA9IChpbnN0YW5jZUlkLCBjb21wb25lbnRJZCkgPT4ge1xuICAgIHJldHVybiBgJHtpbnN0YW5jZUlkfTo6Ojoke2NvbXBvbmVudElkfWA7XG59O1xuY29uc3QgZ2V0Tm9kZUluc3RhbmNlSWQgPSAobm9kZSkgPT4ge1xuICAgIHJldHVybiBub2RlLmluc3RhbmNlSWQgfHwgbmFub2lkKCk7XG59O1xuZXhwb3J0IGNvbnN0IGZsYXR0ZW5Ob2RlcyA9IChub2RlcywgcGFyZW50KSA9PiB7XG4gICAgcmV0dXJuIG5vZGVzLnJlZHVjZSgocHJldiwgbm9kZSkgPT4ge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IHsgY2hpbGRyZW46IGluaXRpYWxDaGlsZHJlbiwgY29tcG9uZW50RGV0YWlscyB9ID0gbm9kZSwgcmVzdCA9IF9fcmVzdChub2RlLCBbXCJjaGlsZHJlblwiLCBcImNvbXBvbmVudERldGFpbHNcIl0pO1xuICAgICAgICBjb25zdCBpbnN0YW5jZUlkID0gZ2V0Tm9kZUluc3RhbmNlSWQobm9kZSk7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gaW5pdGlhbENoaWxkcmVuID09PSBudWxsIHx8IGluaXRpYWxDaGlsZHJlbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5pdGlhbENoaWxkcmVuLm1hcCgoY2hpbGQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGNoaWxkKSwgeyBpbnN0YW5jZUlkOiBnZXROb2RlSW5zdGFuY2VJZChjaGlsZCkgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgZmxhdENvbXBvbmVudERldGFpbHMgPSB7fTtcbiAgICAgICAgaWYgKGNvbXBvbmVudERldGFpbHMpIHtcbiAgICAgICAgICAgIGZsYXRDb21wb25lbnREZXRhaWxzID0gT2JqZWN0LmtleXMoY29tcG9uZW50RGV0YWlscykucmVkdWNlKChwcmV2LCBrZXkpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgY29uc3QgZGV0YWlsID0gY29tcG9uZW50RGV0YWlsc1trZXldO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudEluc3RhbmNlSWQgPSBnZXRDb21wb25lbnRJbnN0YW5jZUlkKGluc3RhbmNlSWQsIGtleSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZGV0YWlsQ2hpbGRyZW4gPSAoX2EgPSBkZXRhaWwuY2hpbGRyZW4pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tYXAoKGRldGFpbENoaWxkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGRldGFpbENoaWxkKSwgeyBpbnN0YW5jZUlkOiBnZXROb2RlSW5zdGFuY2VJZChkZXRhaWxDaGlsZCkgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBwcmV2KSwgeyBbY29tcG9uZW50SW5zdGFuY2VJZF06IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZUlkOiBjb21wb25lbnRJbnN0YW5jZUlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IGRldGFpbENoaWxkcmVuID09PSBudWxsIHx8IGRldGFpbENoaWxkcmVuID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZXRhaWxDaGlsZHJlbi5tYXAoKGNoaWxkKSA9PiBnZXROb2RlSW5zdGFuY2VJZChjaGlsZCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lczogZGV0YWlsLmNsYXNzTmFtZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRyYUNsYXNzTmFtZXM6IGRldGFpbC5leHRyYUNsYXNzTmFtZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiBkZXRhaWwuYXR0cmlidXRlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGRldGFpbC5jb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogZGV0YWlsLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIH0gfSksIGZsYXR0ZW5Ob2RlcyhkZXRhaWxDaGlsZHJlbiB8fCBbXSwgY29tcG9uZW50SW5zdGFuY2VJZCkpO1xuICAgICAgICAgICAgfSwge30pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlcGVhdGVySWRzID0gW107XG4gICAgICAgIGZsYXRDb21wb25lbnREZXRhaWxzID1cbiAgICAgICAgICAgICgoX2EgPSBub2RlLnJlcGVhdGVySXRlbXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZWR1Y2UoKGFjY3VtdWxhdG9yLCBjdXJyZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVwZWF0ZXJJZCA9IGN1cnJlbnQucmVwZWF0ZXJJZCB8fCBuYW5vaWQoKTtcbiAgICAgICAgICAgICAgICByZXBlYXRlcklkcy5wdXNoKHJlcGVhdGVySWQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRNYXAgPSBPYmplY3QuZW50cmllcyhjdXJyZW50LmNvbXBvbmVudERldGFpbHMgfHwge30pLnJlZHVjZSgoY29tcG9uZW50QWNjdW11bGF0b3IsIGN1cnJlbnRDb21wb25lbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tcG9uZW50SW5zdGFuY2VJZCA9IGdldENvbXBvbmVudEluc3RhbmNlSWQoaW5zdGFuY2VJZCwgY3VycmVudENvbXBvbmVudFswXSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDb21wb25lbnRDaGlsZHJlbiA9IChfYiA9IChfYSA9IGN1cnJlbnRDb21wb25lbnRbMV0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jaGlsZHJlbikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLm1hcCgoYykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgYyksIHsgaW5zdGFuY2VJZDogZ2V0Tm9kZUluc3RhbmNlSWQoYykgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmbGF0Q2hpbGRyZW4gPSBmbGF0dGVuTm9kZXMoY3VycmVudENvbXBvbmVudENoaWxkcmVuIHx8IFtdLCBjb21wb25lbnRJbnN0YW5jZUlkKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBjb21wb25lbnRBY2N1bXVsYXRvciksIHsgW2NvbXBvbmVudEluc3RhbmNlSWRdOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGFjY3VtdWxhdG9yW2NvbXBvbmVudEluc3RhbmNlSWRdKSwgeyBpbnN0YW5jZUlkOiBjb21wb25lbnRJbnN0YW5jZUlkLCByZXBlYXRlckNvbnRlbnQ6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgKF9jID0gYWNjdW11bGF0b3JbY29tcG9uZW50SW5zdGFuY2VJZF0pID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5yZXBlYXRlckNvbnRlbnQpLCB7IFtyZXBlYXRlcklkXToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogKF9kID0gY3VycmVudENvbXBvbmVudFsxXSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gfSksIGNoaWxkcmVuOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLigoKF9lID0gYWNjdW11bGF0b3JbY29tcG9uZW50SW5zdGFuY2VJZF0pID09PSBudWxsIHx8IF9lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZS5jaGlsZHJlbikgfHwgW10pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi4oY3VycmVudENvbXBvbmVudENoaWxkcmVuIHx8IFtdKS5tYXAoKGNoaWxkKSA9PiBnZXROb2RlSW5zdGFuY2VJZChjaGlsZCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0gfSkgfSksIE9iamVjdC5rZXlzKGZsYXRDaGlsZHJlbikucmVkdWNlKChjaGlsZEFjY3VtdWxhdG9yLCBjdXJyZW50Q2hpbGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGNoaWxkQWNjdW11bGF0b3IpLCB7IFtjdXJyZW50Q2hpbGRdOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGZsYXRDaGlsZHJlbltjdXJyZW50Q2hpbGRdKSwgeyBwYXJlbnRSZXBlYXRlcjogcmVwZWF0ZXJJZCB9KSB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSwge30pKTtcbiAgICAgICAgICAgICAgICB9LCBhY2N1bXVsYXRvcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgYWNjdW11bGF0b3IpLCBjb250ZW50TWFwKTtcbiAgICAgICAgICAgIH0sIGZsYXRDb21wb25lbnREZXRhaWxzKSkgfHwgZmxhdENvbXBvbmVudERldGFpbHM7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBwcmV2KSwgeyBbaW5zdGFuY2VJZF06IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzdCksIHsgaW5zdGFuY2VJZCxcbiAgICAgICAgICAgICAgICBwYXJlbnQsIGNoaWxkcmVuOiBjaGlsZHJlbiA9PT0gbnVsbCB8fCBjaGlsZHJlbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2hpbGRyZW4ubWFwKChjaGlsZCkgPT4gZ2V0Tm9kZUluc3RhbmNlSWQoY2hpbGQpKSwgcmVwZWF0ZXJJdGVtczogcmVwZWF0ZXJJZHMgfSkgfSksIGZsYXR0ZW5Ob2RlcyhjaGlsZHJlbiB8fCBbXSwgaW5zdGFuY2VJZCkpLCBmbGF0Q29tcG9uZW50RGV0YWlscyk7XG4gICAgfSwge30pO1xufTtcbmNvbnN0IHRyYW5zZm9ybUNvbXBvbmVudENoaWxkcmVuVG9Ob2RlcyA9IChpbnN0YW5jZUlkLCBjb21wb25lbnQsIG5vZGVzLCBjb21wb25lbnRzKSA9PiB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBjb25zdCBjb21wb25lbnRJbnN0YW5jZUlkID0gZ2V0Q29tcG9uZW50SW5zdGFuY2VJZChpbnN0YW5jZUlkLCBjb21wb25lbnQuaWQpO1xuICAgIGNvbnN0IGNoaWxkcmVuID0gKChfYSA9IGNvbXBvbmVudC5jaGlsZHJlbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlZHVjZSgocHJldiwgY2hpbGQpID0+IHtcbiAgICAgICAgY29uc3QgY2hpbGREZXRhaWxzID0gdHJhbnNmb3JtQ29tcG9uZW50Q2hpbGRyZW5Ub05vZGVzKGluc3RhbmNlSWQsIGNoaWxkLCBub2RlcywgY29tcG9uZW50cyk7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHByZXYpLCBjaGlsZERldGFpbHMpO1xuICAgIH0sIHt9KSkgfHwge307XG4gICAgaWYgKG5vZGVzW2NvbXBvbmVudEluc3RhbmNlSWRdKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBub2Rlc1tjb21wb25lbnRJbnN0YW5jZUlkXTtcbiAgICAgICAgY29uc3Qgbm9kZUNoaWxkcmVuID0gKF9iID0gbm9kZS5jaGlsZHJlbikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmZpbHRlcigoY2hpbGRJZCkgPT4geyB2YXIgX2E7IHJldHVybiAhIW5vZGVzW2NoaWxkSWRdICYmICEoKF9hID0gbm9kZXNbY2hpbGRJZF0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wYXJlbnRSZXBlYXRlcik7IH0pO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7IFtjb21wb25lbnQuaWRdOiB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lczogbm9kZS5jbGFzc05hbWVzLFxuICAgICAgICAgICAgICAgIGV4dHJhQ2xhc3NOYW1lczogbm9kZS5leHRyYUNsYXNzTmFtZXMsXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlczogbm9kZS5hdHRyaWJ1dGVzLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiB0cmFuc2Zvcm1DaGlsZHJlblRvTm9kZXMobm9kZUNoaWxkcmVuIHx8IFtdLCBub2RlcywgY29tcG9uZW50cyksXG4gICAgICAgICAgICAgICAgY29udGVudDogbm9kZS5jb250ZW50IHx8IGNvbXBvbmVudC5jb250ZW50LFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IG5vZGUub3B0aW9ucyxcbiAgICAgICAgICAgIH0gfSwgY2hpbGRyZW4pO1xuICAgIH1cbiAgICByZXR1cm4gY2hpbGRyZW47XG59O1xuY29uc3QgZ2V0UmVwZWF0ZXJEZXRhaWxzRnJvbUNvbXBvbmVudHMgPSAoaW5zdGFuY2VJZCwgY29tcG9uZW50LCBub2RlcywgY29tcG9uZW50cywgcmVwZWF0ZXJEZXRhaWxzKSA9PiB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBjb25zdCBjb21wb25lbnRJbnN0YW5jZUlkID0gZ2V0Q29tcG9uZW50SW5zdGFuY2VJZChpbnN0YW5jZUlkLCBjb21wb25lbnQuaWQpO1xuICAgIGNvbnN0IGNvbXBvbmVudERldGFpbHMgPSAoX2EgPSBub2Rlc1tjb21wb25lbnRJbnN0YW5jZUlkXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlcGVhdGVyQ29udGVudDtcbiAgICBjb25zdCBjaGlsZHJlbiA9ICgoX2IgPSBub2Rlc1tjb21wb25lbnRJbnN0YW5jZUlkXSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNoaWxkcmVuKSB8fCBbXTtcbiAgICBsZXQgZGV0YWlscyA9IHJlcGVhdGVyRGV0YWlscztcbiAgICBpZiAoY29tcG9uZW50RGV0YWlscykge1xuICAgICAgICBkZXRhaWxzID0gT2JqZWN0LmVudHJpZXMoY29tcG9uZW50RGV0YWlscykucmVkdWNlKChwcmV2LCBjdXJyZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBbcmVwZWF0ZXJJZCwgcmVwZWF0ZXJJdGVtRGV0YWlsc10gPSBjdXJyZW50O1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcHJldiksIHsgW3JlcGVhdGVySWRdOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHByZXZbcmVwZWF0ZXJJZF0pLCB7IFtjb21wb25lbnQuaWRdOiBPYmplY3QuYXNzaWduKHt9LCByZXBlYXRlckl0ZW1EZXRhaWxzKSB9KSB9KTtcbiAgICAgICAgfSwgcmVwZWF0ZXJEZXRhaWxzKTtcbiAgICB9XG4gICAgZGV0YWlscyA9IE9iamVjdC5rZXlzKGRldGFpbHMpLnJlZHVjZSgocHJldiwgcmVwZWF0ZXJJZCkgPT4ge1xuICAgICAgICBjb25zdCByZXBlYXRlckNoaWxkcmVuID0gY2hpbGRyZW4uZmlsdGVyKChjaGlsZCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgcmV0dXJuICgoX2EgPSBub2Rlc1tjaGlsZF0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wYXJlbnRSZXBlYXRlcikgPT09IHJlcGVhdGVySWQ7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXJlcGVhdGVyQ2hpbGRyZW4ubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHByZXYpLCB7IFtyZXBlYXRlcklkXTogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBwcmV2W3JlcGVhdGVySWRdKSwgeyBbY29tcG9uZW50LmlkXToge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogdHJhbnNmb3JtQ2hpbGRyZW5Ub05vZGVzKHJlcGVhdGVyQ2hpbGRyZW4sIG5vZGVzLCBjb21wb25lbnRzKSxcbiAgICAgICAgICAgICAgICB9IH0pIH0pO1xuICAgIH0sIGRldGFpbHMpO1xuICAgIGlmIChjb21wb25lbnQuY2hpbGRyZW4pIHtcbiAgICAgICAgZGV0YWlscyA9IGNvbXBvbmVudC5jaGlsZHJlbi5yZWR1Y2UoKHByZXYsIGN1cnJlbnQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBnZXRSZXBlYXRlckRldGFpbHNGcm9tQ29tcG9uZW50cyhpbnN0YW5jZUlkLCBjdXJyZW50LCBub2RlcywgY29tcG9uZW50cywgcHJldik7XG4gICAgICAgIH0sIGRldGFpbHMpO1xuICAgIH1cbiAgICByZXR1cm4gZGV0YWlscztcbn07XG5leHBvcnQgY29uc3QgdHJhbnNmb3JtQ2hpbGRyZW5Ub05vZGVzID0gKGNoaWxkcmVuLCBub2RlcywgY29tcG9uZW50cykgPT4ge1xuICAgIHJldHVybiBjaGlsZHJlblxuICAgICAgICAuZmlsdGVyKChjaGlsZElkKSA9PiB7XG4gICAgICAgIHJldHVybiAhIW5vZGVzW2NoaWxkSWRdIHx8IG5vZGVzW2NoaWxkSWRdLnBhcmVudFJlcGVhdGVyO1xuICAgIH0pXG4gICAgICAgIC5tYXAoKGNoaWxkSWQpID0+IHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBfYiA9IG5vZGVzW2NoaWxkSWRdLCB7IHBhcmVudDogX3BhcmVudCwgY2hpbGRyZW4gfSA9IF9iLCBub2RlID0gX19yZXN0KF9iLCBbXCJwYXJlbnRcIiwgXCJjaGlsZHJlblwiXSk7XG4gICAgICAgIGxldCBjb21wb25lbnREZXRhaWxzID0ge307XG4gICAgICAgIGxldCByZXBlYXRlckl0ZW1zID0gKChfYSA9IG5vZGUucmVwZWF0ZXJJdGVtcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlZHVjZSgocHJldiwgY3VycmVudCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcHJldiksIHsgW2N1cnJlbnRdOiB7fSB9KTtcbiAgICAgICAgfSwge30pKSB8fCB7fTtcbiAgICAgICAgaWYgKG5vZGUuaW5zdGFuY2VPZkNvbXBvbmVudCAmJlxuICAgICAgICAgICAgbm9kZS5pbnN0YW5jZU9mQ29tcG9uZW50IGluIGNvbXBvbmVudHMpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudERldGFpbHMgPSB0cmFuc2Zvcm1Db21wb25lbnRDaGlsZHJlblRvTm9kZXMobm9kZS5pbnN0YW5jZUlkLCBjb21wb25lbnRzW25vZGUuaW5zdGFuY2VPZkNvbXBvbmVudF0sIG5vZGVzLCBjb21wb25lbnRzKTtcbiAgICAgICAgICAgIHJlcGVhdGVySXRlbXMgPSBnZXRSZXBlYXRlckRldGFpbHNGcm9tQ29tcG9uZW50cyhub2RlLmluc3RhbmNlSWQsIGNvbXBvbmVudHNbbm9kZS5pbnN0YW5jZU9mQ29tcG9uZW50XSwgbm9kZXMsIGNvbXBvbmVudHMsIHJlcGVhdGVySXRlbXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG5vZGUpLCB7IGNoaWxkcmVuOiB0cmFuc2Zvcm1DaGlsZHJlblRvTm9kZXMoY2hpbGRyZW4gfHwgW10sIG5vZGVzLCBjb21wb25lbnRzKSwgY29tcG9uZW50RGV0YWlscywgcmVwZWF0ZXJJdGVtczogT2JqZWN0LmVudHJpZXMocmVwZWF0ZXJJdGVtcykucmVkdWNlKChwcmV2LCBjdXJyZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgLi4ucHJldixcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVwZWF0ZXJJZDogY3VycmVudFswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudERldGFpbHM6IGN1cnJlbnRbMV0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH0sIFtdKSB9KTtcbiAgICB9KTtcbn07XG5jb25zdCBhcHBseU92ZXJyaWRlc1RvQ29tcG9uZW50ID0gKGNvbXBvbmVudCwgY29tcG9uZW50cywgY29tcG9uZW50RGV0YWlscykgPT4ge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBvdmVycmlkZXMgPSAoY29tcG9uZW50RGV0YWlscyA9PT0gbnVsbCB8fCBjb21wb25lbnREZXRhaWxzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb21wb25lbnREZXRhaWxzW2NvbXBvbmVudC5pZF0pIHx8IHt9O1xuICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IG92ZXJyaWRlcywgb3RoZXJPdmVycmlkZXMgPSBfX3Jlc3Qob3ZlcnJpZGVzLCBbXCJjaGlsZHJlblwiXSk7XG4gICAgY29uc3Qgb3ZlcnJpZGRlbkNoaWxkcmVuID0gY2hpbGRyZW4gPT09IG51bGwgfHwgY2hpbGRyZW4gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNoaWxkcmVuLm1hcCgoY2hpbGQpID0+IHtcbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybU5vZGVUb0NvbXBvbmVudE5vZGUoY2hpbGQsIGNvbXBvbmVudHMsIGNvbXBvbmVudERldGFpbHMpO1xuICAgIH0pLmZpbHRlcigoY2hpbGQpID0+ICEhY2hpbGQpO1xuICAgIGNvbnN0IG1hcHBlZENoaWxkcmVuID0gKF9hID0gY29tcG9uZW50LmNoaWxkcmVuKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubWFwKChjaGlsZCkgPT4ge1xuICAgICAgICByZXR1cm4gYXBwbHlPdmVycmlkZXNUb0NvbXBvbmVudChjaGlsZCwgY29tcG9uZW50cywgY29tcG9uZW50RGV0YWlscyk7XG4gICAgfSk7XG4gICAgbGV0IHByZXNlcnZlZERldGFpbHMgPSBjb21wb25lbnQ7XG4gICAgaWYgKCdjYXRlZ29yeScgaW4gcHJlc2VydmVkRGV0YWlscykge1xuICAgICAgICBjb25zdCB7IGNhdGVnb3J5OiBfY2F0ZWdvcnksIGRpc3BsYXlOYW1lOiBfZGlzcGxheU5hbWUgfSA9IHByZXNlcnZlZERldGFpbHMsIG90aGVyID0gX19yZXN0KHByZXNlcnZlZERldGFpbHMsIFtcImNhdGVnb3J5XCIsIFwiZGlzcGxheU5hbWVcIl0pO1xuICAgICAgICBwcmVzZXJ2ZWREZXRhaWxzID0gb3RoZXI7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcHJlc2VydmVkRGV0YWlscyksIG90aGVyT3ZlcnJpZGVzKSwgeyBpZDogbmFub2lkKCksIGNoaWxkcmVuOiBbLi4uKG92ZXJyaWRkZW5DaGlsZHJlbiB8fCBbXSksIC4uLihtYXBwZWRDaGlsZHJlbiB8fCBbXSldLCBvcHRpb25zOiBbXSB9KTtcbn07XG5jb25zdCB0cmFuc2Zvcm1Ob2RlVG9Db21wb25lbnROb2RlID0gKG5vZGUsIGNvbXBvbmVudHMsIG92ZXJyaWRlcykgPT4ge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4sIGluc3RhbmNlSWQ6IF9pbnN0YW5jZUlkLCBpbnN0YW5jZU9mQ29tcG9uZW50LCBjb21wb25lbnREZXRhaWxzIH0gPSBub2RlLCByZXN0ID0gX19yZXN0KG5vZGUsIFtcImNoaWxkcmVuXCIsIFwiaW5zdGFuY2VJZFwiLCBcImluc3RhbmNlT2ZDb21wb25lbnRcIiwgXCJjb21wb25lbnREZXRhaWxzXCJdKTtcbiAgICBjb25zdCBmdWxsT3ZlcnJpZGVzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvdmVycmlkZXMpLCBjb21wb25lbnREZXRhaWxzKTtcbiAgICBpZiAoaW5zdGFuY2VPZkNvbXBvbmVudCkge1xuICAgICAgICBpZiAoIShpbnN0YW5jZU9mQ29tcG9uZW50IGluIGNvbXBvbmVudHMpKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGNvbXBvbmVudHNbaW5zdGFuY2VPZkNvbXBvbmVudF07XG4gICAgICAgIHJldHVybiBhcHBseU92ZXJyaWRlc1RvQ29tcG9uZW50KGNvbXBvbmVudCwgY29tcG9uZW50cywgZnVsbE92ZXJyaWRlcyk7XG4gICAgfVxuICAgIGNvbnN0IHRyYW5zZm9ybWVkQ2hpbGRyZW4gPSBjaGlsZHJlbiA9PT0gbnVsbCB8fCBjaGlsZHJlbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2hpbGRyZW4ubWFwKChjaGlsZCkgPT4ge1xuICAgICAgICByZXR1cm4gdHJhbnNmb3JtTm9kZVRvQ29tcG9uZW50Tm9kZShjaGlsZCwgY29tcG9uZW50cywgZnVsbE92ZXJyaWRlcyk7XG4gICAgfSkuZmlsdGVyKChjaGlsZCkgPT4gISFjaGlsZCk7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IGlkOiBuYW5vaWQoKSB9LCByZXN0KSwgeyBjaGlsZHJlbjogdHJhbnNmb3JtZWRDaGlsZHJlbiB8fCBbXSB9KTtcbn07XG5leHBvcnQgY29uc3QgY3JlYXRlQ29tcG9uZW50RnJvbU5vZGUgPSAobm9kZSwgZGlzcGxheU5hbWUsIGNhdGVnb3J5LCBjb21wb25lbnRzKSA9PiB7XG4gICAgY29uc3QgZGV0YWlsID0gdHJhbnNmb3JtTm9kZVRvQ29tcG9uZW50Tm9kZShub2RlLCBjb21wb25lbnRzKTtcbiAgICBpZiAoIWRldGFpbClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oeyBkaXNwbGF5TmFtZSxcbiAgICAgICAgY2F0ZWdvcnkgfSwgZGV0YWlsKTtcbn07XG5jb25zdCBnZXRTYWZlbGlzdEZyb21Db21wb25lbnQgPSAoaW5zdGFuY2VJZCwgY29tcG9uZW50LCBub2RlcywgY29tcG9uZW50cykgPT4ge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBjb21wb25lbnRJbnN0YW5jZUlkID0gZ2V0Q29tcG9uZW50SW5zdGFuY2VJZChpbnN0YW5jZUlkLCBjb21wb25lbnQuaWQpO1xuICAgIGNvbnN0IGNoaWxkQ2xhc3NOYW1lcyA9IChfYSA9IGNvbXBvbmVudC5jaGlsZHJlbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1hcCgoY2hpbGQpID0+IHtcbiAgICAgICAgcmV0dXJuIGdldFNhZmVsaXN0RnJvbUNvbXBvbmVudChpbnN0YW5jZUlkLCBjaGlsZCwgbm9kZXMsIGNvbXBvbmVudHMpO1xuICAgIH0pLmpvaW4oJyAnKTtcbiAgICBjb25zdCBjbGFzc05hbWVzID0gW2NvbXBvbmVudC5jbGFzc05hbWVzIHx8ICcnLCBjaGlsZENsYXNzTmFtZXMgfHwgJyddO1xuICAgIGlmIChub2Rlc1tjb21wb25lbnRJbnN0YW5jZUlkXSkge1xuICAgICAgICBjb25zdCBub2RlID0gbm9kZXNbY29tcG9uZW50SW5zdGFuY2VJZF07XG4gICAgICAgIGNsYXNzTmFtZXMucHVzaChub2RlLmNsYXNzTmFtZXMgfHwgJycsIG5vZGUuZXh0cmFDbGFzc05hbWVzIHx8ICcnKTtcbiAgICAgICAgY2xhc3NOYW1lcy5wdXNoKGdldFNhZmVsaXN0RnJvbUNoaWxkcmVuKG5vZGUuY2hpbGRyZW4gfHwgW10sIG5vZGVzLCBjb21wb25lbnRzKSk7XG4gICAgfVxuICAgIGlmIChjb21wb25lbnQub3B0aW9ucykge1xuICAgICAgICBjb21wb25lbnQub3B0aW9ucy5mb3JFYWNoKChvcHRpb24pID0+IHtcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICBpZiAob3B0aW9uLm1vZGlmeSAhPT0gJ2NsYXNzTmFtZScpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgZGVmYXVsdE9wdGlvbiA9IChvcHRpb24udHlwZSA9PT0gJ3NlbGVjdCcgJiYgb3B0aW9uLm9wdGlvbnNbMF0udmFsdWUpIHx8ICcnO1xuICAgICAgICAgICAgY29uc3Qgbm9kZU9wdGlvbiA9IChfYiA9IChfYSA9IG5vZGVzW2NvbXBvbmVudEluc3RhbmNlSWRdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eub3B0aW9ucykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iW29wdGlvbi5uYW1lXTtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMucHVzaChub2RlT3B0aW9uIHx8IGRlZmF1bHRPcHRpb24pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGNsYXNzTmFtZXMuam9pbignICcpO1xufTtcbmV4cG9ydCBjb25zdCBnZXRTYWZlbGlzdEZyb21DaGlsZHJlbiA9IChjaGlsZHJlbiwgbm9kZXMsIGNvbXBvbmVudHMpID0+IHtcbiAgICBjb25zdCBjbGFzc05hbWVzID0gY2hpbGRyZW5cbiAgICAgICAgLmZpbHRlcigoY2hpbGRJZCkgPT4gISFub2Rlc1tjaGlsZElkXSlcbiAgICAgICAgLm1hcCgoY2hpbGRJZCkgPT4ge1xuICAgICAgICBjb25zdCBfYSA9IG5vZGVzW2NoaWxkSWRdLCB7IHBhcmVudDogX3BhcmVudCwgY2hpbGRyZW4gfSA9IF9hLCBub2RlID0gX19yZXN0KF9hLCBbXCJwYXJlbnRcIiwgXCJjaGlsZHJlblwiXSk7XG4gICAgICAgIGNvbnN0IG5vZGVDbGFzc05hbWVzID0gW25vZGUuY2xhc3NOYW1lcywgbm9kZS5leHRyYUNsYXNzTmFtZXNdO1xuICAgICAgICBpZiAobm9kZS5yZXBlYXRlckl0ZW1zKSB7XG4gICAgICAgICAgICBub2RlQ2xhc3NOYW1lcy5wdXNoKGdldFNhZmVsaXN0RnJvbUNoaWxkcmVuKG5vZGUucmVwZWF0ZXJJdGVtcywgbm9kZXMsIGNvbXBvbmVudHMpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGlsZENsYXNzTmFtZXMgPSBnZXRTYWZlbGlzdEZyb21DaGlsZHJlbihjaGlsZHJlbiB8fCBbXSwgbm9kZXMsIGNvbXBvbmVudHMpO1xuICAgICAgICBub2RlQ2xhc3NOYW1lcy5wdXNoKGNoaWxkQ2xhc3NOYW1lcyk7XG4gICAgICAgIGlmIChub2RlLmluc3RhbmNlT2ZDb21wb25lbnQgJiYgbm9kZS5pbnN0YW5jZU9mQ29tcG9uZW50IGluIGNvbXBvbmVudHMpIHtcbiAgICAgICAgICAgIG5vZGVDbGFzc05hbWVzLnB1c2goZ2V0U2FmZWxpc3RGcm9tQ29tcG9uZW50KG5vZGUuaW5zdGFuY2VJZCwgY29tcG9uZW50c1tub2RlLmluc3RhbmNlT2ZDb21wb25lbnRdLCBub2RlcywgY29tcG9uZW50cykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub2RlQ2xhc3NOYW1lcy5qb2luKCcgJyk7XG4gICAgfSlcbiAgICAgICAgLmZsYXQoKVxuICAgICAgICAuam9pbignICcpO1xuICAgIHJldHVybiBjbGFzc05hbWVzO1xufTtcbmNvbnN0IGNsZWFuQ29tcG9uZW50RGV0YWlscyA9IChkZXRhaWxzKSA9PiB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGRldGFpbHMpLnJlZHVjZSgoZGV0YWlsQWNjdW11bGF0b3IsIGN1cnJlbnRDb21wb25lbnQpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudERldGFpbHMgPSBkZXRhaWxzW2N1cnJlbnRDb21wb25lbnRdO1xuICAgICAgICBpZiAoIU9iamVjdC5rZXlzKGN1cnJlbnREZXRhaWxzKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBkZXRhaWxBY2N1bXVsYXRvcjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb21wb25lbnREZXRhaWxzID0gT2JqZWN0LmtleXMoY3VycmVudERldGFpbHMpLnJlZHVjZSgoYWNjdW11bGF0b3IsIGN1cnJlbnQpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50RGV0YWlsc1tjdXJyZW50XSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICAgICAgICAgIGlmIChjdXJyZW50ID09PSAnY2hpbGRyZW4nKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoKF9hID0gY3VycmVudERldGFpbHMuY2hpbGRyZW4pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sZW5ndGgpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgYWNjdW11bGF0b3IpLCB7IFtjdXJyZW50XTogY2xlYW5Ob2RlcyhjdXJyZW50RGV0YWlscy5jaGlsZHJlbikgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBhY2N1bXVsYXRvciksIHsgW2N1cnJlbnRdOiBjdXJyZW50RGV0YWlsc1tjdXJyZW50XSB9KTtcbiAgICAgICAgfSwge30pO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBkZXRhaWxBY2N1bXVsYXRvciksIHsgW2N1cnJlbnRDb21wb25lbnRdOiBjb21wb25lbnREZXRhaWxzIH0pO1xuICAgIH0sIHt9KTtcbn07XG5leHBvcnQgY29uc3QgY2xlYW5Ob2RlcyA9IChub2RlcykgPT4ge1xuICAgIHJldHVybiBub2Rlcy5tYXAoKG5vZGUpID0+IHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgY29uc3QgZGVsZXRlZCA9IE9iamVjdC5hc3NpZ24oe30sIG5vZGUpO1xuICAgICAgICBkZWxldGUgZGVsZXRlZC5pbnN0YW5jZUlkO1xuICAgICAgICBpZiAoJ3BhcmVudFJlcGVhdGVyJyBpbiBkZWxldGVkKSB7XG4gICAgICAgICAgICBkZWxldGUgZGVsZXRlZC5wYXJlbnRSZXBlYXRlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoISgoX2EgPSBub2RlLmNoaWxkcmVuKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGVuZ3RoKSkge1xuICAgICAgICAgICAgZGVsZXRlIGRlbGV0ZWQuY2hpbGRyZW47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkZWxldGVkLmNoaWxkcmVuID0gY2xlYW5Ob2Rlcyhub2RlLmNoaWxkcmVuKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoISgoX2IgPSBub2RlLnJlcGVhdGVySXRlbXMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5sZW5ndGgpKSB7XG4gICAgICAgICAgICBkZWxldGUgZGVsZXRlZC5yZXBlYXRlckl0ZW1zO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVsZXRlZC5yZXBlYXRlckl0ZW1zID0gbm9kZS5yZXBlYXRlckl0ZW1zLm1hcCgoZCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNsZWFuRCA9IE9iamVjdC5hc3NpZ24oe30sIGQpO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBjbGVhbkQucmVwZWF0ZXJJZDtcbiAgICAgICAgICAgICAgICBkZWxldGUgY2xlYW5ELnBhcmVudFJlcGVhdGVyO1xuICAgICAgICAgICAgICAgIGlmIChjbGVhbkQuY29tcG9uZW50RGV0YWlscykge1xuICAgICAgICAgICAgICAgICAgICBjbGVhbkQuY29tcG9uZW50RGV0YWlscyA9IGNsZWFuQ29tcG9uZW50RGV0YWlscyhjbGVhbkQuY29tcG9uZW50RGV0YWlscyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjbGVhbkQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZS5jb21wb25lbnREZXRhaWxzICYmICFPYmplY3Qua2V5cyhub2RlLmNvbXBvbmVudERldGFpbHMpLmxlbmd0aCkge1xuICAgICAgICAgICAgZGVsZXRlIGRlbGV0ZWQuY29tcG9uZW50RGV0YWlscztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlbGV0ZWQuY29tcG9uZW50RGV0YWlscyA9IGNsZWFuQ29tcG9uZW50RGV0YWlscyhub2RlLmNvbXBvbmVudERldGFpbHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWxldGVkO1xuICAgIH0pO1xufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9yZXN0cmljdC10ZW1wbGF0ZS1leHByZXNzaW9ucyAqL1xuaW1wb3J0IHR3UGx1Z2luIGZyb20gJ3RhaWx3aW5kY3NzL3BsdWdpbidcblxuY29uc3QgYWN0aXZlSXRlbVZhcmlhbnRzID0gW1xuICAnYmFja2dyb3VuZENvbG9yJyxcbiAgJ2JhY2tncm91bmRPcGFjaXR5JyxcbiAgJ2JvcmRlckNvbG9yJyxcbiAgJ2JvcmRlck9wYWNpdHknLFxuICAnYm94U2hhZG93JyxcbiAgJ2Rpc3BsYXknLFxuICAnZHJvcFNoYWRvdycsXG4gICdmb250V2VpZ2h0JyxcbiAgJ29wYWNpdHknLFxuICAncm90YXRlJyxcbiAgJ3NjYWxlJyxcbiAgJ3NrZXcnLFxuICAndGV4dENvbG9yJyxcbiAgJ3RleHRPcGFjaXR5JyxcbiAgJ3RleHREZWNvcmF0aW9uJyxcbiAgJ3RyYW5zZm9ybScsXG4gICd0cmFuc2xhdGUnLFxuICAndmlzaWJpbGl0eScsXG5dLnJlZHVjZSgoYWNjdW11bGF0b3IsIHZhcmlhbnQpID0+IHtcbiAgcmV0dXJuIHtcbiAgICAuLi5hY2N1bXVsYXRvcixcbiAgICBbdmFyaWFudF06IFsnZ3VzdC1hY3RpdmUtaXRlbScsICdncm91cC1ndXN0LWFjdGl2ZS1pdGVtJ10sXG4gIH1cbn0sIHt9KVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRhcmtNb2RlOiBmYWxzZSxcbiAgdGhlbWU6IHtcbiAgICBleHRlbmQ6IHtcbiAgICAgIGNvbG9yczoge1xuICAgICAgICBwcmltYXJ5OiAnIzE5NzZEMicsXG4gICAgICAgIHNlY29uZGFyeTogJyM0MjQyNDInLFxuICAgICAgICBhY2NlbnQ6ICcjODJCMUZGJyxcbiAgICAgICAgZXJyb3I6ICcjRkY1MjUyJyxcbiAgICAgICAgaW5mbzogJyMyMTk2RjMnLFxuICAgICAgICBzdWNjZXNzOiAnIzRDQUY1MCcsXG4gICAgICAgIHdhcm5pbmc6ICcjRkZDMTA3JyxcbiAgICAgICAgZ3VzdDoge1xuICAgICAgICAgIHByaW1hcnk6ICcjODNBNUZGJyxcbiAgICAgICAgICBncmF5OiB7XG4gICAgICAgICAgICAxMDA6ICcjRjFFREVGJyxcbiAgICAgICAgICAgIDIwMDogJyNFN0UwRTInLFxuICAgICAgICAgICAgMzAwOiAnI0QxRDFENicsXG4gICAgICAgICAgICA0MDA6ICcjQzdDN0M3JyxcbiAgICAgICAgICAgIDkwMDogJyMzMzMnLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVkOiB7XG4gICAgICAgICAgICA0MDA6ICcjRkZCREJEJyxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIGdyaWRUZW1wbGF0ZUNvbHVtbnM6IHtcbiAgICAgICAgJzFwNS1hdXRvJzogJzEuNXJlbSBhdXRvJyxcbiAgICAgIH0sXG4gICAgICBtaW5IZWlnaHQ6IHtcbiAgICAgICAgMjA6ICc1cmVtJyxcbiAgICAgICAgNjA6ICcxNXJlbScsXG4gICAgICAgICdzY3JlZW4tYWRtaW4tYmFyJzogJ2NhbGMoMTAwdmggLSAzMnB4KScsXG4gICAgICB9LFxuICAgICAgc3BhY2luZzoge1xuICAgICAgICAnYWRtaW4tYmFyJzogJzMycHgnLFxuICAgICAgICAnc2NyZWVuLWFkbWluLWJhcic6ICdjYWxjKDEwMHZoIC0gMzJweCknLFxuICAgICAgfSxcbiAgICAgIHR5cG9ncmFwaHk6IHtcbiAgICAgICAgREVGQVVMVDoge1xuICAgICAgICAgIGNzczoge1xuICAgICAgICAgICAgY29sb3I6ICdpbmhlcml0JyxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9LFxuICB9LFxuICB2YXJpYW50czoge1xuICAgIGFjdGl2ZUl0ZW1WYXJpYW50cyxcbiAgfSxcbiAgcGx1Z2luczogW1xuICAgIHJlcXVpcmUoJ0B0YWlsd2luZGNzcy9saW5lLWNsYW1wJyksXG4gICAgcmVxdWlyZSgnQHRhaWx3aW5kY3NzL3R5cG9ncmFwaHknKSxcbiAgICByZXF1aXJlKCdAdGFpbHdpbmRjc3MvYXNwZWN0LXJhdGlvJyksXG4gICAgcmVxdWlyZSgnQHRhaWx3aW5kY3NzL2Zvcm1zJyksXG4gICAgdHdQbHVnaW4oZnVuY3Rpb24gKHsgYWRkVmFyaWFudCwgZSB9KSB7XG4gICAgICBhZGRWYXJpYW50KCdndXN0LWFjdGl2ZS1pdGVtJywgKHsgbW9kaWZ5U2VsZWN0b3JzLCBzZXBhcmF0b3IgfSkgPT4ge1xuICAgICAgICBtb2RpZnlTZWxlY3RvcnMoKHsgY2xhc3NOYW1lIH0pID0+IHtcbiAgICAgICAgICByZXR1cm4gYC5ndXN0LWFjdGl2ZS1pdGVtLiR7ZShcbiAgICAgICAgICAgIGBndXN0LWFjdGl2ZS1pdGVtJHtzZXBhcmF0b3J9JHtjbGFzc05hbWV9YCxcbiAgICAgICAgICApfWBcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgICBhZGRWYXJpYW50KCdncm91cC1ndXN0LWFjdGl2ZS1pdGVtJywgKHsgbW9kaWZ5U2VsZWN0b3JzLCBzZXBhcmF0b3IgfSkgPT4ge1xuICAgICAgICBtb2RpZnlTZWxlY3RvcnMoKHsgY2xhc3NOYW1lIH0pID0+IHtcbiAgICAgICAgICByZXR1cm4gYC5ncm91cC5ndXN0LWFjdGl2ZS1pdGVtIC4ke2UoXG4gICAgICAgICAgICBgZ3JvdXAtZ3VzdC1hY3RpdmUtaXRlbSR7c2VwYXJhdG9yfSR7Y2xhc3NOYW1lfWAsXG4gICAgICAgICAgKX1gXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0pLFxuICBdLFxufVxuIiwiaW1wb3J0IHsgcnVuUGx1Z2luIH0gZnJvbSAnfnNyYy91dGlsL3J1blBsdWdpbidcbmltcG9ydCBkbHYgZnJvbSAnZGx2J1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFyaWFudHMoc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmppdCkge1xuICAgIGZ1bmN0aW9uIGVzY2FwZShjbGFzc05hbWUpIHtcbiAgICAgIGxldCBub2RlID0gc3RhdGUubW9kdWxlcy5wb3N0Y3NzU2VsZWN0b3JQYXJzZXIubW9kdWxlLmNsYXNzTmFtZSgpXG4gICAgICBub2RlLnZhbHVlID0gY2xhc3NOYW1lXG4gICAgICByZXR1cm4gZGx2KG5vZGUsICdyYXdzLnZhbHVlJywgbm9kZS52YWx1ZSlcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0ge31cbiAgICAvLyBbbmFtZSwgW3NvcnQsIGZuXV1cbiAgICAvLyBbbmFtZSwgW1tzb3J0LCBmbl1dXVxuICAgIEFycmF5LmZyb20oc3RhdGUuaml0Q29udGV4dC52YXJpYW50TWFwKS5mb3JFYWNoKFxuICAgICAgKFt2YXJpYW50TmFtZSwgdmFyaWFudEZuT3JGbnNdKSA9PiB7XG4gICAgICAgIGxldCBmbnMgPSAoQXJyYXkuaXNBcnJheSh2YXJpYW50Rm5PckZuc1swXSlcbiAgICAgICAgICA/IHZhcmlhbnRGbk9yRm5zXG4gICAgICAgICAgOiBbdmFyaWFudEZuT3JGbnNdXG4gICAgICAgICkubWFwKChbX3NvcnQsIGZuXSkgPT4gZm4pXG5cbiAgICAgICAgbGV0IHBsYWNlaG9sZGVyID0gJ19fdmFyaWFudF9wbGFjZWhvbGRlcl9fJ1xuXG4gICAgICAgIGxldCByb290ID0gc3RhdGUubW9kdWxlcy5wb3N0Y3NzLm1vZHVsZS5yb290KHtcbiAgICAgICAgICBub2RlczogW1xuICAgICAgICAgICAgc3RhdGUubW9kdWxlcy5wb3N0Y3NzLm1vZHVsZS5ydWxlKHtcbiAgICAgICAgICAgICAgc2VsZWN0b3I6IGAuJHtlc2NhcGUocGxhY2Vob2xkZXIpfWAsXG4gICAgICAgICAgICAgIG5vZGVzOiBbXSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIF0sXG4gICAgICAgIH0pXG5cbiAgICAgICAgbGV0IGNsYXNzTmFtZVBhcnNlciA9IHN0YXRlLm1vZHVsZXMucG9zdGNzc1NlbGVjdG9yUGFyc2VyLm1vZHVsZShcbiAgICAgICAgICAoc2VsZWN0b3JzKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0b3JzLmZpcnN0LmZpbHRlcigoeyB0eXBlIH0pID0+IHR5cGUgPT09ICdjbGFzcycpLnBvcCgpXG4gICAgICAgICAgICAgIC52YWx1ZVxuICAgICAgICAgIH0sXG4gICAgICAgIClcblxuICAgICAgICBmdW5jdGlvbiBnZXRDbGFzc05hbWVGcm9tU2VsZWN0b3Ioc2VsZWN0b3IpIHtcbiAgICAgICAgICByZXR1cm4gY2xhc3NOYW1lUGFyc2VyLnRyYW5zZm9ybVN5bmMoc2VsZWN0b3IpXG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBtb2RpZnlTZWxlY3RvcnMobW9kaWZpZXJGdW5jdGlvbikge1xuICAgICAgICAgIHJvb3QuZWFjaCgocnVsZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3J1bGUnKSB7XG4gICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBydWxlLnNlbGVjdG9ycyA9IHJ1bGUuc2VsZWN0b3JzLm1hcCgoc2VsZWN0b3IpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIG1vZGlmaWVyRnVuY3Rpb24oe1xuICAgICAgICAgICAgICAgIGdldCBjbGFzc05hbWUoKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Q2xhc3NOYW1lRnJvbVNlbGVjdG9yKHNlbGVjdG9yKVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2VsZWN0b3IsXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pXG4gICAgICAgICAgcmV0dXJuIHJvb3RcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBkZWZpbml0aW9ucyA9IFtdXG5cbiAgICAgICAgZm9yIChsZXQgZm4gb2YgZm5zKSB7XG4gICAgICAgICAgbGV0IGRlZmluaXRpb25cbiAgICAgICAgICBsZXQgY29udGFpbmVyID0gcm9vdC5jbG9uZSgpXG4gICAgICAgICAgbGV0IHJldHVyblZhbHVlID0gZm4oe1xuICAgICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgICAgc2VwYXJhdG9yOiBzdGF0ZS5zZXBhcmF0b3IsXG4gICAgICAgICAgICBtb2RpZnlTZWxlY3RvcnMsXG4gICAgICAgICAgICBmb3JtYXQ6IChkZWYpID0+IHtcbiAgICAgICAgICAgICAgZGVmaW5pdGlvbiA9IGRlZi5yZXBsYWNlKC86bWVyZ2VcXCgoW14pXSspXFwpL2csICckMScpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgd3JhcDogKHJ1bGUpID0+IHtcbiAgICAgICAgICAgICAgaWYgKHJ1bGUudHlwZSA9PT0gJ2F0cnVsZScpIHtcbiAgICAgICAgICAgICAgICBkZWZpbml0aW9uID0gYEAke3J1bGUubmFtZX0gJHtydWxlLnBhcmFtc31gXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSlcblxuICAgICAgICAgIGlmICghZGVmaW5pdGlvbikge1xuICAgICAgICAgICAgZGVmaW5pdGlvbiA9IHJldHVyblZhbHVlXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGRlZmluaXRpb24pIHtcbiAgICAgICAgICAgIGRlZmluaXRpb25zLnB1c2goZGVmaW5pdGlvbilcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGFpbmVyLndhbGtEZWNscygoZGVjbCkgPT4ge1xuICAgICAgICAgICAgZGVjbC5yZW1vdmUoKVxuICAgICAgICAgIH0pXG5cbiAgICAgICAgICBkZWZpbml0aW9uID0gcmVtb3ZlQnJhY2tldHMoXG4gICAgICAgICAgICBjb250YWluZXJcbiAgICAgICAgICAgICAgLnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgLnJlcGxhY2UoYC4ke2VzY2FwZShgJHt2YXJpYW50TmFtZX06JHtwbGFjZWhvbGRlcn1gKX1gLCAnJicpLFxuICAgICAgICAgIClcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXHMqXFxuXFxzKi9nLCAnICcpXG4gICAgICAgICAgICAudHJpbSgpXG5cbiAgICAgICAgICBpZiAoIWRlZmluaXRpb24uaW5jbHVkZXMocGxhY2Vob2xkZXIpKSB7XG4gICAgICAgICAgICBkZWZpbml0aW9ucy5wdXNoKGRlZmluaXRpb24pXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0W3ZhcmlhbnROYW1lXSA9IGRlZmluaXRpb25zLmpvaW4oJywgJykgfHwgbnVsbFxuICAgICAgfSxcbiAgICApXG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICBsZXQgY29uZmlnID0gc3RhdGUuY29uZmlnXG5cbiAgbGV0IHZhcmlhbnRzID0gW1xuICAgICdyZXNwb25zaXZlJyxcbiAgICAnaG92ZXInLFxuICAgICdmb2N1cycsXG4gICAgJ2dyb3VwLWhvdmVyJyxcbiAgICAnYWN0aXZlJyxcbiAgICAnZm9jdXMtd2l0aGluJyxcbiAgICAnZGVmYXVsdCcsXG4gICAgJ2ZpcnN0JyxcbiAgICAnbGFzdCcsXG4gICAgJ29kZCcsXG4gICAgJ2V2ZW4nLFxuICAgICdkaXNhYmxlZCcsXG4gICAgJ3Zpc2l0ZWQnLFxuICAgICdncm91cC1mb2N1cycsXG4gICAgJ2ZvY3VzLXZpc2libGUnLFxuICAgICdjaGVja2VkJyxcbiAgICAnbW90aW9uLXNhZmUnLFxuICAgICdtb3Rpb24tcmVkdWNlJyxcbiAgICAnZGFyaycsXG4gIF1cblxuICBsZXQgcGx1Z2lucyA9IEFycmF5LmlzQXJyYXkoY29uZmlnLnBsdWdpbnMpID8gY29uZmlnLnBsdWdpbnMgOiBbXVxuXG4gIHBsdWdpbnMuZm9yRWFjaCgocGx1Z2luKSA9PiB7XG4gICAgcnVuUGx1Z2luKHBsdWdpbiwgc3RhdGUsIHtcbiAgICAgIGFkZFZhcmlhbnQ6IChuYW1lKSA9PiB7XG4gICAgICAgIHZhcmlhbnRzLnB1c2gobmFtZSlcbiAgICAgIH0sXG4gICAgfSlcbiAgfSlcblxuICByZXR1cm4gdmFyaWFudHMucmVkdWNlKChvYmosIHZhcmlhbnQpID0+ICh7IC4uLm9iaiwgW3ZhcmlhbnRdOiBudWxsIH0pLCB7fSlcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQnJhY2tldHMoc3RyKSB7XG4gIGxldCByZXN1bHQgPSAnJ1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGxldCBpc0JyYWNrZXQgPSAoc3RyW2ldID09PSAneycgfHwgc3RyW2ldID09PSAnfScpICYmIHN0cltpIC0gMV0gIT09ICdcXFxcJ1xuICAgIGlmICghaXNCcmFja2V0KSB7XG4gICAgICByZXN1bHQgKz0gc3RyW2ldXG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRcbn1cbiIsImltcG9ydCB7IGRvQ29tcGxldGUsIGdldENvbG9yIH0gZnJvbSAndGFpbHdpbmRjc3MtbGFuZ3VhZ2Utc2VydmljZSdcbmltcG9ydCB7IGltcG9ydERlcGVuZGVuY2llcyB9IGZyb20gJ35zcmMvd29ya2Vycy9pbXBvcnREZXBlbmRlbmNpZXMnXG5pbXBvcnQgcG9zdGNzc1NlbGVjdG9yUGFyc2VyIGZyb20gJ3Bvc3Rjc3Mtc2VsZWN0b3ItcGFyc2VyJ1xuaW1wb3J0IHsgVGV4dERvY3VtZW50IH0gZnJvbSAndnNjb2RlLWxhbmd1YWdlc2VydmVyLXRleHRkb2N1bWVudCdcbmltcG9ydCB7IGdldFZhcmlhbnRzIH0gZnJvbSAnfnNyYy91dGlsL2dldFZhcmlhbnRzJ1xuXG5jb25zdCBsaXN0U3VnZ2VzdGlvbnMgPSBhc3luYyAoeyBjb25maWcsIHRhaWx3aW5kVmVyc2lvbiB9KSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgZGVwZW5kZW5jaWVzID0gYXdhaXQgaW1wb3J0RGVwZW5kZW5jaWVzKHRhaWx3aW5kVmVyc2lvbilcbiAgICBjb25zdCBzdGF0ZSA9IHtcbiAgICAgIGppdDogdHJ1ZSxcbiAgICAgIHNlcGFyYXRvcjogY29uZmlnLnNlcGFyYXRvciB8fCAnOicsXG4gICAgICB2ZXJzaW9uOiAnMy4xLjMnLFxuICAgICAgZmVhdHVyZUZsYWdzOiBkZXBlbmRlbmNpZXMuZmVhdHVyZUZsYWdzLFxuICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgIGVkaXRvcjoge1xuICAgICAgICB1c2VyTGFuZ3VhZ2VzOiB7fSxcbiAgICAgICAgY2FwYWJpbGl0aWVzOiB7fSxcbiAgICAgICAgZ2V0Q29uZmlndXJhdGlvbjogKCkgPT4gKHtcbiAgICAgICAgICBlZGl0b3I6IHtcbiAgICAgICAgICAgIHRhYlNpemU6IDIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB0YWlsd2luZENTUzoge1xuICAgICAgICAgICAgdmFsaWRhdGU6IHRydWUsXG4gICAgICAgICAgICBjbGFzc0F0dHJpYnV0ZXM6IFsnY2xhc3MnXSxcbiAgICAgICAgICAgIGxpbnQ6IHtcbiAgICAgICAgICAgICAgY3NzQ29uZmxpY3Q6ICd3YXJuaW5nJyxcbiAgICAgICAgICAgICAgaW52YWxpZEFwcGx5OiAnZXJyb3InLFxuICAgICAgICAgICAgICBpbnZhbGlkU2NyZWVuOiAnZXJyb3InLFxuICAgICAgICAgICAgICBpbnZhbGlkVmFyaWFudDogJ2Vycm9yJyxcbiAgICAgICAgICAgICAgaW52YWxpZENvbmZpZ1BhdGg6ICdlcnJvcicsXG4gICAgICAgICAgICAgIGludmFsaWRUYWlsd2luZERpcmVjdGl2ZTogJ2Vycm9yJyxcbiAgICAgICAgICAgICAgcmVjb21tZW5kZWRWYXJpYW50T3JkZXI6ICd3YXJuaW5nJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSksXG4gICAgICB9LFxuICAgICAgbW9kdWxlczoge1xuICAgICAgICBwb3N0Y3NzOiB7XG4gICAgICAgICAgbW9kdWxlOiBkZXBlbmRlbmNpZXMucG9zdGNzcyxcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGNzc1NlbGVjdG9yUGFyc2VyOiB7XG4gICAgICAgICAgbW9kdWxlOiBwb3N0Y3NzU2VsZWN0b3JQYXJzZXIsXG4gICAgICAgIH0sXG4gICAgICAgIGppdDoge1xuICAgICAgICAgIGdlbmVyYXRlUnVsZXM6IHtcbiAgICAgICAgICAgIG1vZHVsZTogZGVwZW5kZW5jaWVzLmdlbmVyYXRlUnVsZXMuZ2VuZXJhdGVSdWxlcyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGV4cGFuZEFwcGx5QXRSdWxlczoge1xuICAgICAgICAgICAgbW9kdWxlOiBkZXBlbmRlbmNpZXMuZXhwYW5kQXBwbHlBdFJ1bGVzLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgY29uZmlnOiBkZXBlbmRlbmNpZXMucmVzb2x2ZUNvbmZpZyhjb25maWcpLFxuICAgIH1cblxuICAgIHN0YXRlLnNjcmVlbnMgPVxuICAgICAgdHlwZW9mIHN0YXRlLmNvbmZpZy50aGVtZS5zY3JlZW5zID09PSAnb2JqZWN0J1xuICAgICAgICA/IE9iamVjdC5rZXlzKHN0YXRlLmNvbmZpZy50aGVtZS5zY3JlZW5zKVxuICAgICAgICA6IFtdXG5cbiAgICBzdGF0ZS5qaXRDb250ZXh0ID1cbiAgICAgIHRhaWx3aW5kVmVyc2lvbiA9PT0gMlxuICAgICAgICA/IHJlcXVpcmUoJ3RhaWx3aW5kY3NzL2xpYi9qaXQvbGliL3NldHVwQ29udGV4dFV0aWxzJykuY3JlYXRlQ29udGV4dChcbiAgICAgICAgICAgIHN0YXRlLmNvbmZpZyxcbiAgICAgICAgICApXG4gICAgICAgIDogcmVxdWlyZSgndGFpbHdpbmRjc3MtdjMvbGliL2xpYi9zZXR1cENvbnRleHRVdGlscycpLmNyZWF0ZUNvbnRleHQoXG4gICAgICAgICAgICBzdGF0ZS5jb25maWcsXG4gICAgICAgICAgKVxuICAgIGlmIChzdGF0ZS5qaXRDb250ZXh0LmdldENsYXNzTGlzdCkge1xuICAgICAgc3RhdGUuY2xhc3NMaXN0ID0gc3RhdGUuaml0Q29udGV4dFxuICAgICAgICAuZ2V0Q2xhc3NMaXN0KClcbiAgICAgICAgLmZpbHRlcigoY2xhc3NOYW1lKSA9PiBjbGFzc05hbWUgIT09ICcqJylcbiAgICAgICAgLm1hcCgoY2xhc3NOYW1lKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIFtjbGFzc05hbWUsIHsgY29sb3I6IGdldENvbG9yKHN0YXRlLCBjbGFzc05hbWUpIH1dXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgc3RhdGUudmFyaWFudHMgPSBnZXRWYXJpYW50cyhzdGF0ZSlcblxuICAgIGNvbnN0IGRvY3VtZW50ID0gVGV4dERvY3VtZW50LmNyZWF0ZShcbiAgICAgICdmaWxlOi8vL0hUTUwnLFxuICAgICAgJ2h0bWwnLFxuICAgICAgMSxcbiAgICAgICc8ZGl2IGNsYXNzPVwiIFwiPjwvZGl2PicsXG4gICAgKVxuXG4gICAgY29uc3Qgc3VnZ2VzdGlvbnMgPSBhd2FpdCBkb0NvbXBsZXRlKFxuICAgICAgc3RhdGUsXG4gICAgICBkb2N1bWVudCxcbiAgICAgIHtcbiAgICAgICAgbGluZTogMCxcbiAgICAgICAgY2hhcmFjdGVyOiAxMyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHRyaWdnZXJDaGFyYWN0ZXI6ICcgJyxcbiAgICAgICAgdHJpZ2dlcktpbmQ6IDEsXG4gICAgICB9LFxuICAgIClcblxuICAgIHJldHVybiB7XG4gICAgICBzdWdnZXN0aW9ucyxcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5sb2coZXJyb3IpXG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yLFxuICAgIH1cbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgbGlzdFN1Z2dlc3Rpb25zXG4iLCJpbXBvcnQgZGx2IGZyb20gJ2RsdidcblxuZXhwb3J0IGZ1bmN0aW9uIHJ1blBsdWdpbihwbHVnaW4sIHN0YXRlLCBvdmVycmlkZXMpIHtcbiAgdHJ5IHtcbiAgICA7KHBsdWdpbi5oYW5kbGVyIHx8IHBsdWdpbikoe1xuICAgICAgYWRkVXRpbGl0aWVzOiAoKSA9PiB7fSxcbiAgICAgIGFkZENvbXBvbmVudHM6ICgpID0+IHt9LFxuICAgICAgYWRkQmFzZTogKCkgPT4ge30sXG4gICAgICBtYXRjaFV0aWxpdGllczogKCkgPT4ge30sXG4gICAgICBhZGRWYXJpYW50OiAoKSA9PiB7fSxcbiAgICAgIGU6ICh4KSA9PiB4LFxuICAgICAgcHJlZml4OiAoeCkgPT4geCxcbiAgICAgIHRoZW1lOiAocGF0aCwgZGVmYXVsdFZhbHVlKSA9PlxuICAgICAgICBkbHYoc3RhdGUuY29uZmlnLCBgdGhlbWUuJHtwYXRofWAsIGRlZmF1bHRWYWx1ZSksXG4gICAgICB2YXJpYW50czogKCkgPT4gW10sXG4gICAgICBjb25maWc6IChwYXRoLCBkZWZhdWx0VmFsdWUpID0+IGRsdihzdGF0ZS5jb25maWcsIHBhdGgsIGRlZmF1bHRWYWx1ZSksXG4gICAgICBjb3JlUGx1Z2luczogKHBhdGgpID0+IHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc3RhdGUuY29uZmlnLmNvcmVQbHVnaW5zKSkge1xuICAgICAgICAgIHJldHVybiBzdGF0ZS5jb25maWcuY29yZVBsdWdpbnMuaW5jbHVkZXMocGF0aClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGx2KHN0YXRlLmNvbmZpZywgYGNvcmVQbHVnaW5zLiR7cGF0aH1gLCB0cnVlKVxuICAgICAgfSxcbiAgICAgIHRhcmdldDogKHBhdGgpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzdGF0ZS5jb25maWcudGFyZ2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHJldHVybiBzdGF0ZS5jb25maWcudGFyZ2V0XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgW2RlZmF1bHRUYXJnZXQsIHRhcmdldE92ZXJyaWRlc10gPSBkbHYoc3RhdGUuY29uZmlnLCAndGFyZ2V0JylcbiAgICAgICAgcmV0dXJuIGRsdih0YXJnZXRPdmVycmlkZXMsIHBhdGgsIGRlZmF1bHRUYXJnZXQpXG4gICAgICB9LFxuICAgICAgcG9zdGNzczogc3RhdGUubW9kdWxlcy5wb3N0Y3NzLm1vZHVsZSxcbiAgICAgIC4uLm92ZXJyaWRlcyxcbiAgICB9KVxuICB9IGNhdGNoIChfKSB7fVxufVxuIiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5pbXBvcnQgY29tcGlsZSBmcm9tICd+c3JjL3dvcmtlcnMvY29tcGlsZSc7XG5pbXBvcnQgeyBnZXRTYWZlbGlzdEZyb21DaGlsZHJlbiB9IGZyb20gJ35zcmMvdXRpbC9ub2Rlcyc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnbG9kYXNoL21lcmdlJztcbmltcG9ydCBjb25maWcgZnJvbSAnfnNyYy93b3JrZXJzL2NvbmZpZyc7XG5pbXBvcnQgeyB0b1ZhbGlkVGFpbHdpbmRWZXJzaW9uIH0gZnJvbSAnfnNyYy91dGlsL3RvVmFsaWRUYWlsd2luZFZlcnNpb24nO1xuaW1wb3J0IGxpc3RTdWdnZXN0aW9ucyBmcm9tICd+c3JjL3dvcmtlcnMvbGlzdFN1Z2dlc3Rpb25zJztcbmxldCBsYXN0SHRtbDtcbmxldCBsYXN0Q3NzO1xubGV0IGxhc3RDb25maWc7XG5jb25zdCBjdHggPSBzZWxmO1xuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIChldmVudCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IHRhaWx3aW5kVmVyc2lvbiA9IHRvVmFsaWRUYWlsd2luZFZlcnNpb24oZXZlbnQuZGF0YS50YWlsd2luZFZlcnNpb24gfHwgJzInKTtcbiAgICBzd2l0Y2ggKGV2ZW50LmRhdGEuYWN0aW9uKSB7XG4gICAgICAgIGNhc2UgJ2NvbXBpbGUnOiB7XG4gICAgICAgICAgICBpZiAoIWV2ZW50LmRhdGEubm9kZXMgfHwgIWV2ZW50LmRhdGEuY29tcG9uZW50cykge1xuICAgICAgICAgICAgICAgIGN0eC5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgICAgIF9pZDogZXZlbnQuZGF0YS5faWQsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiAnTWlzc2luZyBub2RlcyBvciBjb21wb25lbnRzJyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzYWZlbGlzdCA9IGdldFNhZmVsaXN0RnJvbUNoaWxkcmVuKCgoX2EgPSBldmVudC5kYXRhLm5vZGVzLlJPT1QpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jaGlsZHJlbikgfHwgW10sIGV2ZW50LmRhdGEubm9kZXMsIGV2ZW50LmRhdGEuY29tcG9uZW50cykucmVwbGFjZSgvJ3xcIi9nLCAnJyk7XG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0SHRtbCA9IGV2ZW50LmRhdGEuZGVmYXVsdEhUTUwgfHxcbiAgICAgICAgICAgICAgICBgPGRpdiBjbGFzcz1cIiR7c2FmZWxpc3R9ICR7ZXZlbnQuZGF0YS5zYWZlbGlzdCB8fCAnJ31cIj48L2Rpdj5gO1xuICAgICAgICAgICAgY29uc3QgZGVmYXVsdENzcyA9IGV2ZW50LmRhdGEuY3NzO1xuICAgICAgICAgICAgY29uc3QgZmluYWxDb25maWcgPSBtZXJnZShjb25maWcsIGV2ZW50LmRhdGEuY29uZmlnIHx8IHt9LCB7XG4gICAgICAgICAgICAgICAgbW9kZTogJ2ppdCcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICgoZXZlbnQuZGF0YS5hY3Rpb24gPT09ICdjb21waWxlJyAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBldmVudC5kYXRhLmNvbmZpZyAhPT0gJ3VuZGVmaW5lZCcpIHx8XG4gICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5fcmVjb21waWxlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaHRtbCA9IGV2ZW50LmRhdGEuX3JlY29tcGlsZSA/IGxhc3RIdG1sIDogZGVmYXVsdEh0bWw7XG4gICAgICAgICAgICAgICAgY29uc3QgY3NzID0gZXZlbnQuZGF0YS5fcmVjb21waWxlID8gbGFzdENzcyA6IGRlZmF1bHRDc3M7XG4gICAgICAgICAgICAgICAgY29uc3QgY29uZmlnID0gZXZlbnQuZGF0YS5fcmVjb21waWxlID8gbGFzdENvbmZpZyA6IGZpbmFsQ29uZmlnO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzRnJlc2hCdWlsZCA9IGNzcyAhPT0gbGFzdENzcyB8fCBjb25maWcgIT09IGxhc3RDb25maWc7XG4gICAgICAgICAgICAgICAgbGFzdEh0bWwgPSBodG1sO1xuICAgICAgICAgICAgICAgIGxhc3RDc3MgPSBjc3M7XG4gICAgICAgICAgICAgICAgbGFzdENvbmZpZyA9IGNvbmZpZztcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB5aWVsZCBjb21waWxlKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBldmVudC5kYXRhKSwgeyBfaXNGcmVzaEJ1aWxkOiBpc0ZyZXNoQnVpbGQsIGh0bWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBjc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWcsIG1pbmlmeTogISFldmVudC5kYXRhLm1pbmlmeSwgdGFpbHdpbmRWZXJzaW9uIH0pLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgJiYgIXJlc3VsdC5lcnJvciAmJiAhcmVzdWx0LmNhbmNlbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgnYnVpbGRJZCcgaW4gcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLkJVSUxEX0lEID0gcmVzdWx0LmJ1aWxkSWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY3R4LnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pZDogZXZlbnQuZGF0YS5faWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBjc3M6IHJlc3VsdC5jc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sOiByZXN1bHQuaHRtbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGppdDogcmVzdWx0LmppdCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjdHgucG9zdE1lc3NhZ2UoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXN1bHQpLCB7IF9pZDogZXZlbnQuZGF0YS5faWQgfSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2xpc3RTdWdnZXN0aW9ucyc6IHtcbiAgICAgICAgICAgIGNvbnN0IGZpbmFsQ29uZmlnID0gbWVyZ2UoY29uZmlnLCBldmVudC5kYXRhLmNvbmZpZyB8fCB7fSwge1xuICAgICAgICAgICAgICAgIG1vZGU6ICdqaXQnLFxuICAgICAgICAgICAgICAgIHBsdWdpbnM6IFtdLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB5aWVsZCBsaXN0U3VnZ2VzdGlvbnMoe1xuICAgICAgICAgICAgICAgIGNvbmZpZzogZmluYWxDb25maWcsXG4gICAgICAgICAgICAgICAgdGFpbHdpbmRWZXJzaW9uLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAocmVzdWx0ICYmICFyZXN1bHQuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjdHgucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgICAgICBfaWQ6IGV2ZW50LmRhdGEuX2lkLFxuICAgICAgICAgICAgICAgICAgICBzdWdnZXN0aW9uczogcmVzdWx0LnN1Z2dlc3Rpb25zLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY3R4LnBvc3RNZXNzYWdlKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzdWx0KSwgeyBfaWQ6IGV2ZW50LmRhdGEuX2lkIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGN0eC5wb3N0TWVzc2FnZSh7IGVycm9yOiAnTm8gbWF0Y2hpbmcgYWN0aW9uJywgX2lkOiBldmVudC5kYXRhLl9pZCB9KTtcbiAgICAgICAgfVxuICAgIH1cbn0pKTtcbiIsImV4cG9ydCBmdW5jdGlvbiB0b1ZhbGlkVGFpbHdpbmRWZXJzaW9uKHZhbHVlLCBkZWZhdWx0VmVyc2lvbiA9ICcyJykge1xuICBpZiAoWycyJywgJzMnXS5pbmNsdWRlcyh2YWx1ZSkpIHJldHVybiB2YWx1ZVxuICByZXR1cm4gZGVmYXVsdFZlcnNpb25cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBvcHRpb25zOiB7IGVuYWJsZWQ6IGZhbHNlIH0sXG59XG4iLCJjb25zdCB7IFZJUlRVQUxfU09VUkNFX1BBVEggfSA9IHJlcXVpcmUoJy4uL3dvcmtlcnMvY29uc3RhbnRzJylcblxubGV0IGkgPSAwXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzdGF0U3luYzogKGlkKSA9PiB7XG4gICAgaWYgKGlkID09PSBWSVJUVUFMX1NPVVJDRV9QQVRIKSB7XG4gICAgICByZXR1cm4geyBtdGltZU1zOiBzZWxmLkJVSUxEX0lEIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgbXRpbWVNczogKytpIH1cbiAgfSxcbiAgcmVhZEZpbGVTeW5jOiAoaWQpID0+IHNlbGZbaWRdIHx8ICcnLFxufVxuIiwibGV0IHBsdWdpbnMgPSB7XG4gICdAdGFpbHdpbmRjc3MvY3VzdG9tLWZvcm1zJzogcmVxdWlyZSgnQHRhaWx3aW5kY3NzL2N1c3RvbS1mb3Jtcy9wYWNrYWdlLmpzb24/ZmllbGRzPXZlcnNpb24sbWFpbicpLFxuICAnQHRhaWx3aW5kY3NzL2Zvcm1zJzogcmVxdWlyZSgnQHRhaWx3aW5kY3NzL2Zvcm1zL3BhY2thZ2UuanNvbj9maWVsZHM9dmVyc2lvbixtYWluJyksXG4gICdAdGFpbHdpbmRjc3MvdHlwb2dyYXBoeSc6IHJlcXVpcmUoJ0B0YWlsd2luZGNzcy90eXBvZ3JhcGh5L3BhY2thZ2UuanNvbj9maWVsZHM9dmVyc2lvbixtYWluJyksXG4gICdAdGFpbHdpbmRjc3MvdWknOiByZXF1aXJlKCdAdGFpbHdpbmRjc3MvdWkvcGFja2FnZS5qc29uP2ZpZWxkcz12ZXJzaW9uLG1haW4nKSxcbiAgJ0B0YWlsd2luZGNzcy9hc3BlY3QtcmF0aW8nOiByZXF1aXJlKCdAdGFpbHdpbmRjc3MvYXNwZWN0LXJhdGlvL3BhY2thZ2UuanNvbj9maWVsZHM9dmVyc2lvbixtYWluJyksXG4gICdAdGFpbHdpbmRjc3MvbGluZS1jbGFtcCc6IHJlcXVpcmUoJ0B0YWlsd2luZGNzcy9saW5lLWNsYW1wL3BhY2thZ2UuanNvbj9maWVsZHM9dmVyc2lvbixtYWluJyksXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBQTFVHSU5fQlVJTERFUl9WRVJTSU9OOiAnNCcsXG4gIFZJUlRVQUxfU09VUkNFX1BBVEg6ICcvc291cmNlUGF0aCcsXG4gIFZJUlRVQUxfSFRNTF9GSUxFTkFNRTogJy9odG1sSW5wdXQnLFxuICBQTFVHSU5TOiB7XG4gICAgMjogcGx1Z2lucyxcbiAgICAzOiB7XG4gICAgICAuLi5wbHVnaW5zLFxuICAgICAgJ0B0YWlsd2luZGNzcy9mb3Jtcyc6IHJlcXVpcmUoJ0B0YWlsd2luZGNzcy9mb3Jtcy1uZXh0L3BhY2thZ2UuanNvbj9maWVsZHM9dmVyc2lvbixtYWluJyksXG4gICAgICAnQHRhaWx3aW5kY3NzL3R5cG9ncmFwaHknOiByZXF1aXJlKCdAdGFpbHdpbmRjc3MvdHlwb2dyYXBoeS1uZXh0L3BhY2thZ2UuanNvbj9maWVsZHM9dmVyc2lvbixtYWluJyksXG4gICAgfSxcbiAgfSxcbn1cbiJdLCJuYW1lcyI6WyJkZXBzIiwidGFpbHdpbmQiLCJwb3N0Y3NzIiwiYXV0b3ByZWZpeGVyIiwiZmVhdHVyZUZsYWdzIiwicmVzb2x2ZUNvbmZpZyIsImdlbmVyYXRlUnVsZXMiLCJleHBhbmRBcHBseUF0UnVsZXMiLCJjb250ZXh0VXRpbHMiLCJpbXBvcnREZXBlbmRlbmNpZXMiLCJhc3luYyIsInZlcnNpb24iLCJQcm9taXNlIiwiYWxsIiwiT2JqZWN0Iiwia2V5cyIsIm1hcCIsImtleSIsIm1vZHVsZSIsImRlZmF1bHQiLCJyZWR1Y2UiLCJhY2N1bXVsYXRvciIsImN1cnJlbnQiLCJhcHBseU1vZHVsZTIiLCJhcHBseTIiLCJmb3JtYXROb2RlcyIsInJvb3QiLCJpbmRlbnRSZWN1cnNpdmUiLCJmaXJzdCIsInJhd3MiLCJiZWZvcmUiLCJub2RlIiwiaW5kZW50IiwiZWFjaCIsImNoaWxkIiwiaSIsInRyaW0iLCJpbmNsdWRlcyIsInR5cGUiLCJyZXBlYXQiLCJhZnRlciIsInNlbGYiLCJCVUlMRF9JRCIsImdldFNhZmVsaXN0RnJvbUNvbXBvbmVudCIsImluc3RhbmNlSWQiLCJjb21wb25lbnQiLCJub2RlcyIsImNvbXBvbmVudHMiLCJfYSIsImNvbXBvbmVudEluc3RhbmNlSWQiLCJjb21wb25lbnRJZCIsImdldENvbXBvbmVudEluc3RhbmNlSWQiLCJpZCIsImNoaWxkQ2xhc3NOYW1lcyIsImNoaWxkcmVuIiwiam9pbiIsImNsYXNzTmFtZXMiLCJwdXNoIiwiZXh0cmFDbGFzc05hbWVzIiwiZ2V0U2FmZWxpc3RGcm9tQ2hpbGRyZW4iLCJvcHRpb25zIiwiZm9yRWFjaCIsIm9wdGlvbiIsIl9iIiwibW9kaWZ5IiwiZGVmYXVsdE9wdGlvbiIsInZhbHVlIiwibm9kZU9wdGlvbiIsIm5hbWUiLCJmaWx0ZXIiLCJjaGlsZElkIiwicGFyZW50IiwiX3BhcmVudCIsInMiLCJlIiwidCIsInAiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpbmRleE9mIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibGVuZ3RoIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJfX3Jlc3QiLCJub2RlQ2xhc3NOYW1lcyIsInJlcGVhdGVySXRlbXMiLCJpbnN0YW5jZU9mQ29tcG9uZW50IiwiZmxhdCIsImRhcmtNb2RlIiwidGhlbWUiLCJleHRlbmQiLCJjb2xvcnMiLCJwcmltYXJ5Iiwic2Vjb25kYXJ5IiwiYWNjZW50IiwiZXJyb3IiLCJpbmZvIiwic3VjY2VzcyIsIndhcm5pbmciLCJndXN0IiwiZ3JheSIsInJlZCIsImdyaWRUZW1wbGF0ZUNvbHVtbnMiLCJtaW5IZWlnaHQiLCJzcGFjaW5nIiwidHlwb2dyYXBoeSIsIkRFRkFVTFQiLCJjc3MiLCJjb2xvciIsInZhcmlhbnRzIiwiYWN0aXZlSXRlbVZhcmlhbnRzIiwidmFyaWFudCIsInBsdWdpbnMiLCJhZGRWYXJpYW50IiwibW9kaWZ5U2VsZWN0b3JzIiwic2VwYXJhdG9yIiwiY2xhc3NOYW1lIiwicmVtb3ZlQnJhY2tldHMiLCJzdHIiLCJyZXN1bHQiLCJjb25maWciLCJ0YWlsd2luZFZlcnNpb24iLCJkZXBlbmRlbmNpZXMiLCJzdGF0ZSIsImppdCIsImVuYWJsZWQiLCJlZGl0b3IiLCJ1c2VyTGFuZ3VhZ2VzIiwiY2FwYWJpbGl0aWVzIiwiZ2V0Q29uZmlndXJhdGlvbiIsInRhYlNpemUiLCJ0YWlsd2luZENTUyIsInZhbGlkYXRlIiwiY2xhc3NBdHRyaWJ1dGVzIiwibGludCIsImNzc0NvbmZsaWN0IiwiaW52YWxpZEFwcGx5IiwiaW52YWxpZFNjcmVlbiIsImludmFsaWRWYXJpYW50IiwiaW52YWxpZENvbmZpZ1BhdGgiLCJpbnZhbGlkVGFpbHdpbmREaXJlY3RpdmUiLCJyZWNvbW1lbmRlZFZhcmlhbnRPcmRlciIsIm1vZHVsZXMiLCJwb3N0Y3NzU2VsZWN0b3JQYXJzZXIiLCJzY3JlZW5zIiwiaml0Q29udGV4dCIsImdldENsYXNzTGlzdCIsImNsYXNzTGlzdCIsImdldENvbG9yIiwiZXNjYXBlIiwiQXJyYXkiLCJmcm9tIiwidmFyaWFudE1hcCIsInZhcmlhbnROYW1lIiwidmFyaWFudEZuT3JGbnMiLCJmbnMiLCJpc0FycmF5IiwiX3NvcnQiLCJmbiIsInBsYWNlaG9sZGVyIiwicnVsZSIsInNlbGVjdG9yIiwiY2xhc3NOYW1lUGFyc2VyIiwic2VsZWN0b3JzIiwicG9wIiwibW9kaWZpZXJGdW5jdGlvbiIsInRyYW5zZm9ybVN5bmMiLCJnZXRDbGFzc05hbWVGcm9tU2VsZWN0b3IiLCJkZWZpbml0aW9ucyIsImRlZmluaXRpb24iLCJjb250YWluZXIiLCJjbG9uZSIsInJldHVyblZhbHVlIiwiZm9ybWF0IiwiZGVmIiwicmVwbGFjZSIsIndyYXAiLCJwYXJhbXMiLCJ3YWxrRGVjbHMiLCJkZWNsIiwicmVtb3ZlIiwidG9TdHJpbmciLCJwbHVnaW4iLCJvdmVycmlkZXMiLCJoYW5kbGVyIiwiYWRkVXRpbGl0aWVzIiwiYWRkQ29tcG9uZW50cyIsImFkZEJhc2UiLCJtYXRjaFV0aWxpdGllcyIsIngiLCJwcmVmaXgiLCJwYXRoIiwiZGVmYXVsdFZhbHVlIiwiY29yZVBsdWdpbnMiLCJ0YXJnZXQiLCJkZWZhdWx0VGFyZ2V0IiwidGFyZ2V0T3ZlcnJpZGVzIiwiXyIsInJ1blBsdWdpbiIsIm9iaiIsImdldFZhcmlhbnRzIiwiZG9jdW1lbnQiLCJzdWdnZXN0aW9ucyIsImRvQ29tcGxldGUiLCJsaW5lIiwiY2hhcmFjdGVyIiwidHJpZ2dlckNoYXJhY3RlciIsInRyaWdnZXJLaW5kIiwiY29uc29sZSIsImxvZyIsImxhc3RIdG1sIiwibGFzdENzcyIsImxhc3RDb25maWciLCJjdHgiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsImdlbmVyYXRvciIsImRlZmF1bHRWZXJzaW9uIiwidG9WYWxpZFRhaWx3aW5kVmVyc2lvbiIsImRhdGEiLCJhY3Rpb24iLCJwb3N0TWVzc2FnZSIsIl9pZCIsInNhZmVsaXN0IiwiUk9PVCIsImRlZmF1bHRIdG1sIiwiZGVmYXVsdEhUTUwiLCJkZWZhdWx0Q3NzIiwiZmluYWxDb25maWciLCJtb2RlIiwiX3JlY29tcGlsZSIsImh0bWwiLCJpc0ZyZXNoQnVpbGQiLCJfY3VycmVudCIsIl9pc0ZyZXNoQnVpbGQiLCJidWlsZElkIiwiY29tcGlsZWRDc3MiLCJjb21waWxlZEh0bWwiLCJjb25maWdJbnB1dCIsImh0bWxJbnB1dCIsImNzc0lucHV0Iiwic2tpcEludGVsbGlTZW5zZSIsIm1pbmlmeSIsIlZJUlRVQUxfSFRNTF9GSUxFTkFNRSIsImlzVjMiLCJjb250ZW50IiwicHVyZ2UiLCJhcmdzIiwiY29uZmlnQ2xvbmUiLCJ3YWxrUnVsZXMiLCJuZXdTZWxlY3RvciIsImNvbW1lbnQiLCJ0ZXh0Iiwid2Fsa0NvbW1lbnRzIiwic3RhcnRzV2l0aCIsIm5leHQiLCJoYXNEaXJlY3RpdmUiLCJ3YWxrQXRSdWxlcyIsImFwcGVuZCIsInN1cHBvcnRlZExheWVycyIsImF0UnVsZSIsImxheWVyIiwicGFyZW50TGF5ZXIiLCJCb29sZWFuIiwicHJvY2VzcyIsIlZJUlRVQUxfU09VUkNFX1BBVEgiLCJ1bmRlZmluZWQiLCJlc2NhcGVkU2VwYXJhdG9yIiwibSIsInRlc3QiLCJwcm9jZXNzQ3NzIiwibWF0Y2giLCJtZXNzYWdlIiwiZmlsZSIsImFzc2lnbiIsImNhbmNlbGVkIiwiUCIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJzdGVwIiwicmVqZWN0ZWQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiZXhwb3J0cyIsInN0YXRTeW5jIiwibXRpbWVNcyIsInJlYWRGaWxlU3luYyIsIlBMVUdJTl9CVUlMREVSX1ZFUlNJT04iLCJQTFVHSU5TIl0sInNvdXJjZVJvb3QiOiIifQ==