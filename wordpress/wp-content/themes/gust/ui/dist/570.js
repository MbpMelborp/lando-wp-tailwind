"use strict";(self.webpackChunkgust_builder=self.webpackChunkgust_builder||[]).push([[570],{77570:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return t=>{let r=function(e){let t=null;return{get:r=>(t=t||e(),t.get(r)),has:r=>(t=t||e(),t.has(r))}}((()=>function(e,t){let r=new Map,n=t.layerOrder.user>>4n;return e.walkRules(((e,t)=>{for(let t of h(e)){var o;if(void 0!==(null===(o=t.raws.tailwind)||void 0===o?void 0:o.layer))return}let l=function(e){for(let t of h(e))if(e!==t){if("root"===t.type)break;e=y(t,{nodes:[e]})}return e}(e);for(let o of u(e)){let e=r.get(o)||[];r.set(o,e),e.push([{layer:"user",sort:BigInt(t)+n,important:!1},l])}})),r}(t,e)));m(t,e,r)}};var n=i(r(96195)),o=i(r(75276)),l=r(5225),a=i(r(71255)),s=i(r(56203));function i(e){return e&&e.__esModule?e:{default:e}}function u(e){let t=new Map;n.default.root({nodes:[e.clone()]}).walkRules((e=>{o.default((e=>{e.walkClasses((e=>{let r=e.parent.toString(),n=t.get(r);n||t.set(r,n=new Set),n.add(e.value)}))})).processSync(e.selector)}));let r=Array.from(t.values(),(e=>Array.from(e))),l=r.flat();return Object.assign(l,{groups:r})}let f=o.default((e=>e.nodes.map((e=>e.toString()))));function p(e){return f.transformSync(e)}function c(e,t){let r=new Set;for(let n of e)r.add(n.split(t).pop());return Array.from(r)}function d(e,t){let r=e.tailwindConfig.prefix;return"function"==typeof r?r(t):r+t}function*h(e){for(yield e;e.parent;)yield e.parent,e=e.parent}function y(e,t={}){let r=e.nodes;e.nodes=[];let n=e.clone(t);return e.nodes=r,n}function w(e,t){for(let r of e){if(t.notClassCache.has(r)||t.applyClassCache.has(r))continue;if(t.classCache.has(r)){t.applyClassCache.set(r,t.classCache.get(r).map((([e,t])=>[e,t.clone()])));continue}let e=Array.from(l.resolveMatches(r,t));0!==e.length?t.applyClassCache.set(r,e):t.notClassCache.add(r)}return t.applyClassCache}function g(e){let t=e.split(/[\s\t\n]+/g);return"!important"===t[t.length-1]?[t.slice(0,-1),!0]:[t,!1]}function m(e,t,r){let o=new Set,l=[];if(e.walkAtRules("apply",(e=>{let[t]=g(e.params);for(let e of t)o.add(e);l.push(e)})),0===l.length)return;let i=(f=[r,w(o,t)],{get:e=>f.flatMap((t=>t.get(e)||[])),has:e=>f.some((t=>t.has(e)))});var f;function h(e,t,r){let n=`.${s.default(r)}`,o=[...new Set([n,n.replace(/\\2c /g,"\\,")])],l=p(t);return p(e).map((e=>{let t=[];for(let r of l){let n=r;for(const t of o)n=n.replace(t,e);n!==r&&t.push(n)}return t.join(", ")})).join(", ")}let y=new Map;for(let e of l){let[r]=y.get(e.parent)||[[],e.source];y.set(e.parent,[r,e.source]);let[n,o]=g(e.params);if("atrule"===e.parent.type){if("screen"===e.parent.name){const t=e.parent.params;throw e.error(`@apply is not supported within nested at-rules like @screen. We suggest you write this as @apply ${n.map((e=>`${t}:${e}`)).join(" ")} instead.`)}throw e.error(`@apply is not supported within nested at-rules like @${e.parent.name}. You can fix this by un-nesting @${e.parent.name}.`)}for(let l of n){if([d(t,"group"),d(t,"peer")].includes(l))throw e.error(`@apply should not be used with the '${l}' utility`);if(!i.has(l))throw e.error(`The \`${l}\` class does not exist. If \`${l}\` is a custom class, make sure it is defined within a \`@layer\` directive.`);let n=i.get(l);r.push([l,o,n])}}for(const[e,[r,o]]of y){let l=[];for(let[a,s,i]of r){let r=[a,...c([a],t.tailwindConfig.separator)];for(let[f,p]of i){let i=u(e),d=u(p);if(d=d.groups.filter((e=>e.some((e=>r.includes(e))))).flat(),d=d.concat(c(d,t.tailwindConfig.separator)),i.some((e=>d.includes(e))))throw p.error(`You cannot \`@apply\` the \`${a}\` utility here because it creates a circular dependency.`);let y=n.default.root({nodes:[p.clone()]});y.walk((e=>{e.source=o})),("atrule"!==p.type||"atrule"===p.type&&"keyframes"!==p.name)&&y.walkRules((r=>{if(!u(r).some((e=>e===a)))return void r.remove();let n="string"==typeof t.tailwindConfig.important?t.tailwindConfig.important:null,o=void 0!==e.raws.tailwind&&n&&0===e.selector.indexOf(n)?e.selector.slice(n.length):e.selector;r.selector=h(o,r.selector,a),n&&o!==e.selector&&(r.selector=`${n} ${r.selector}`),r.walkDecls((e=>{e.important=f.important||s}))})),l.push([{...f,sort:f.sort|t.layerOrder[f.layer]},y.nodes[0]])}}let s=l.sort((([e],[t])=>a.default(e.sort-t.sort))).map((e=>e[1]));e.after(s)}for(let e of l)e.parent.nodes.length>1?e.remove():e.parent.remove();m(e,t,r)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,