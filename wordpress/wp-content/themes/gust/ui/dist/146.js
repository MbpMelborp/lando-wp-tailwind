"use strict";(self.webpackChunkgust_builder=self.webpackChunkgust_builder||[]).push([[146],{47146:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.resolveMatches=m,t.generateRules=function(e,t){let n=[];for(let r of e){if(t.notClassCache.has(r))continue;if(t.classCache.has(r)){n.push(t.classCache.get(r));continue}let e=Array.from(m(r,t));0!==e.length?(t.classCache.set(r,e),n.push(e)):t.notClassCache.add(r)}return n.flat(1).map((([{sort:e,layer:n,options:o},l])=>{if(o.respectImportant)if(!0===t.tailwindConfig.important)l.walkDecls((e=>{"rule"!==e.parent.type||w(e.parent)||(e.important=!0)}));else if("string"==typeof t.tailwindConfig.important){let e=r.default.root({nodes:[l.clone()]});e.walkRules((e=>{w(e)||(e.selectors=e.selectors.map((e=>`${t.tailwindConfig.important} ${e}`)))})),l=e.nodes[0]}return[e|t.layerOrder[n],l]}))};var r=f(n(50020)),o=f(n(97161)),l=f(n(20772)),s=f(n(40293)),a=f(n(41812)),i=n(78511);function f(e){return e&&e.__esModule?e:{default:e}}let u=(0,o.default)((e=>e.first.filter((({type:e})=>"class"===e)).pop().value));function c(e){return u.transformSync(e)}function*p(e,t=1/0){if(t<0)return;let n;if(t===1/0&&e.endsWith("]")){let t=e.indexOf("[");n=["-","/"].includes(e[t-1])?t-1:-1}else n=e.lastIndexOf("-",t);if(n<0)return;let r=e.slice(0,n),o=e.slice(n+1);yield[r,o],yield*p(e,n-1)}function d(e,t){if(0===e.length||""===t.tailwindConfig.prefix)return e;for(let n of e){let[e]=n;if(e.options.respectPrefix){let e=r.default.root({nodes:[n[1].clone()]});e.walkRules((e=>{e.selector=(0,a.default)(t.tailwindConfig.prefix,e.selector)})),n[1]=e.nodes[0]}}return e}function h(e){if(0===e.length)return e;let t=[];for(let[n,o]of e){let e=r.default.root({nodes:[o.clone()]});e.walkRules((e=>{e.selector=(0,i.updateAllClasses)(e.selector,(e=>`!${e}`)),e.walkDecls((e=>e.important=!0))})),t.push([{...n,important:!0},e.nodes[0]])}return t}function g(e,t,n){if(0===t.length)return t;if(n.variantMap.has(e)){let o=n.variantMap.get(e),l=[];for(let[e,s]of t){if(!1===e.options.respectVariants){l.push([e,s]);continue}let t=r.default.root({nodes:[s.clone()]});for(let[r,s]of o){let o=t.clone();function a(e){return o.each((t=>{"rule"===t.type&&(t.selectors=t.selectors.map((t=>e({get className(){return c(t)},selector:t}))))})),o}if(null===s({container:o,separator:n.tailwindConfig.separator,modifySelectors:a}))continue;let i=[{...e,sort:r|e.sort},o.nodes[0]];l.push(i)}}return l}return[]}function y(e,t,n={}){return(0,s.default)(e)||Array.isArray(e)?Array.isArray(e)?y(e[0],t,e[1]):(t.has(e)||t.set(e,(0,l.default)(e)),[t.get(e),n]):[[e],n]}function*C(e,t){t.candidateRuleMap.has(e)&&(yield[t.candidateRuleMap.get(e),"DEFAULT"]);let n=e,r=!1;const o=t.tailwindConfig.prefix||"",l=o.length;"-"===n[l]&&(r=!0,n=o+n.slice(l+1));for(let[e,o]of p(n))if(t.candidateRuleMap.has(e))return void(yield[t.candidateRuleMap.get(e),r?`-${o}`:o])}function*m(e,t){let n=t.tailwindConfig.separator,[r,...o]=function(e,t){return e.split(new RegExp(`\\${t}(?![^[]*\\])`,"g"))}(e,n).reverse(),l=!1;r.startsWith("!")&&(l=!0,r=r.slice(1));for(let e of C(r,t)){let n=[],[r,s]=e;for(let[e,o]of r)if("function"==typeof o)for(let r of[].concat(o(s))){let[o,l]=y(r,t.postCssNodeCache);for(let t of o)n.push([{...e,options:{...e.options,...l}},t])}else if("DEFAULT"===s){let r=o,[l,s]=y(r,t.postCssNodeCache);for(let t of l)n.push([{...e,options:{...e.options,...s}},t])}n=d(n,t),l&&(n=h(n));for(let e of o)n=g(e,n,t);for(let e of n)yield e}}function w(e){return e.parent&&"atrule"===e.parent.type&&"keyframes"===e.parent.name}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,